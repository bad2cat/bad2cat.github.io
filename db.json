{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/pure/source/favicon.png","path":"favicon.png","modified":1,"renderable":1},{"_id":"themes/pure/source/party-big.png","path":"party-big.png","modified":1,"renderable":1},{"_id":"themes/pure/source/party.png","path":"party.png","modified":1,"renderable":1},{"_id":"themes/pure/source/css/style.css","path":"css/style.css","modified":1,"renderable":1},{"_id":"themes/pure/source/css/style.min.css","path":"css/style.min.css","modified":1,"renderable":1},{"_id":"themes/pure/source/fonts/README.md","path":"fonts/README.md","modified":1,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.eot","path":"fonts/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.ttf","path":"fonts/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.svg","path":"fonts/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.woff","path":"fonts/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/pure/source/js/application.js","path":"js/application.js","modified":1,"renderable":1},{"_id":"themes/pure/source/js/insight.js","path":"js/insight.js","modified":1,"renderable":1},{"_id":"themes/pure/source/js/application.min.js","path":"js/application.min.js","modified":1,"renderable":1},{"_id":"themes/pure/source/js/jquery.min.js","path":"js/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/pure/source/js/plugin.js","path":"js/plugin.js","modified":1,"renderable":1},{"_id":"themes/pure/source/js/plugin.js.map","path":"js/plugin.js.map","modified":1,"renderable":1},{"_id":"themes/pure/source/js/plugin.min.js","path":"js/plugin.min.js","modified":1,"renderable":1},{"_id":"themes/pure/source/images/labixiaoxin.jpg","path":"images/labixiaoxin.jpg","modified":1,"renderable":1},{"_id":"themes/pure/source/images/xingqiu-qrcode.jpg","path":"images/xingqiu-qrcode.jpg","modified":1,"renderable":1},{"_id":"themes/pure/source/images/thumb-default.png","path":"images/thumb-default.png","modified":1,"renderable":1},{"_id":"themes/pure/source/images/donate/alipayimg.png","path":"images/donate/alipayimg.png","modified":1,"renderable":1},{"_id":"themes/pure/source/images/donate/wechatpayimg.png","path":"images/donate/wechatpayimg.png","modified":1,"renderable":1},{"_id":"themes/pure/source/images/favatar/chuangzaoshi-logo.png","path":"images/favatar/chuangzaoshi-logo.png","modified":1,"renderable":1},{"_id":"themes/pure/source/images/favatar/SzsFox-logo.png","path":"images/favatar/SzsFox-logo.png","modified":1,"renderable":1},{"_id":"themes/pure/source/images/favatar/idesign-logo.png","path":"images/favatar/idesign-logo.png","modified":1,"renderable":1}],"Cache":[{"_id":"source/思想/NewWorld.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1648629440892},{"_id":"source/_posts/更换博客主题.md","hash":"05eab2ab04b1ddac1db2e3fa08a3212b9758a445","modified":1648629440706},{"_id":"source/CNAME","hash":"2670b9e5c6853d4f92c752f39a7b1297b65c7ead","modified":1647231854902},{"_id":"source/_data/styles.styl","hash":"e862bc91462a24690402af922a5be77fd43155ca","modified":1647231854902},{"_id":"source/_posts/设计模式-工厂模式.md","hash":"2177f0161bafe1d5598d4b0aab56397613db1b48","modified":1649222789670},{"_id":"source/_posts/部署Hexo到Github-pages.md","hash":"49e9b5aa76dbc4d780470d78ff427dcd611e8e55","modified":1648695175478},{"_id":"source/_posts/域名解析.md","hash":"c2989c684382ee998a278a3908f665592d0eb630","modified":1648629440703},{"_id":"source/_posts/使用hexo搭建个人blog.md","hash":"965c27b134ada9daf5388467d1a983b3f67984cb","modified":1648629440700},{"_id":"source/_drafts/nodejs-安装详解.md","hash":"1bf730969ff73d6933779e341ef8a5ea3da0d236","modified":1647425798081},{"_id":"source/_drafts/Github不支持账密操作的解决方案.md","hash":"b3a6abeff02b7070fdb403f2c3aecd8c8766e773","modified":1648631193574},{"_id":"source/about/index.md","hash":"d68a4b3c345f08d3c11cb606f5dccb265925c700","modified":1647231854903},{"_id":"source/_drafts/日志规范.md","hash":"8f733af1720819407184ca90360d6c7bf013a5e4","modified":1648808388819},{"_id":"source/_drafts/如何收集日志.md","hash":"7673659dc13342c74c694cd7fbfc9d30a8c21d14","modified":1648631375588},{"_id":"source/_posts/DNS-域名解析.md","hash":"5d2c43005a8b029139373f543f874f924a7a1d47","modified":1647409141844},{"_id":"source/books/index.md","hash":"d913d58987f539ac2ca4cca366ebf42f8b1a03d1","modified":1647331694432},{"_id":"source/categories/index.md","hash":"0ebc7f40e353cae938ec4c23e73c726024093d80","modified":1647231854903},{"_id":"source/links/index.md","hash":"d768332d0d322fe39267dbbda05b931488c27d7e","modified":1647331694432},{"_id":"source/tags/index.md","hash":"469077052ba3780bfa8aecea4c5171df963eb28f","modified":1647231854903},{"_id":"source/repository/index.md","hash":"bf2bec13066d7d53fc05a334876eb482e6f95825","modified":1647331694432},{"_id":"source/_posts/更换博客主题/03.png","hash":"a0c5b088c4748413ae6c7e288f8cebdf810c7a24","modified":1648629440744},{"_id":"source/_posts/设计模式-原型模式.md","hash":"e8c47ef959ad58b5e32b901bb40119ae817e697f","modified":1648691005475},{"_id":"source/_posts/更换博客主题/05.png","hash":"f11f00001871fa2e53945e9419c280600489545b","modified":1648629440755},{"_id":"source/schedule/index.md","hash":"8228bd4c6d61584bf71792ccb7bde225a7f6afa1","modified":1647231854903},{"_id":"source/思想/index.md","hash":"9bd4df398ff45a39afa24d0ce12c8fbc2e5e8dc0","modified":1648629440894},{"_id":"source/_posts/集成GithubAction.md","hash":"dc96b6526ce22f68d1e59a9ece0e655f0fe71fa3","modified":1648629440863},{"_id":"source/_posts/更换博客主题/08.png","hash":"d424f9d87db7da507408c21803a46afe1792e864","modified":1648629440803},{"_id":"source/_posts/更换博客主题/07.png","hash":"19c79b66c66c277768b0c2bef2668fb927316a0f","modified":1648629440798},{"_id":"source/_posts/更换博客主题/09.png","hash":"3a2ae40ed8cefd1c409fc9ca06c61a581b359c98","modified":1648629440806},{"_id":"source/_posts/设计模式-原型模式/01.png","hash":"315c97a77c3336e92a6139bd91c4edfcabd33c7c","modified":1648608032238},{"_id":"source/_posts/设计模式-工厂模式/fac_complex.png","hash":"7c34cbcc5a169560f3846c95277bb4c0e8cd7bfe","modified":1649222343169},{"_id":"source/_posts/设计模式-工厂模式/factory_simple.png","hash":"1072b0e55333887bfc2b8a9c5c0b5058c7ecda3e","modified":1649222343172},{"_id":"source/_posts/更换博客主题/13.png","hash":"c30913264244710d7e4983e813cad3b8463f43cf","modified":1648629440826},{"_id":"source/_posts/部署Hexo到Github-pages/03.png","hash":"cb13ef0b7c52b7e491203334c8e757cd4779cc6e","modified":1648629440861},{"_id":"source/_posts/更换博客主题/10.png","hash":"3cd4e1f4c27ad49a832bd7dbb6660bb77fe05c4b","modified":1648629440814},{"_id":"source/_posts/集成GithubAction/03.png","hash":"825b0ffddf3c58d134b9eecc1f25ea4298b1f0fb","modified":1648629440892},{"_id":"source/_posts/部署Hexo到Github-pages/02.png","hash":"7a09779cdbdaca93fd60a79181f96ef04cde4cc4","modified":1648629440857},{"_id":"themes/pure/.gitignore","hash":"204766bf9e2d6fe1fce5b9b02b8edfac2d235830","modified":1647331694433},{"_id":"source/_posts/集成GithubAction/01.png","hash":"812948af461ed90ea0646df03fe5c927b0f42653","modified":1648629440867},{"_id":"source/_posts/集成GithubAction/02.png","hash":"6e57eaf782b279175eb624f589c42de460284fcf","modified":1648629440881},{"_id":"themes/pure/_config.yml","hash":"648424e9b9a6099a3f8ffb0ff48df2642ae9bafe","modified":1647390662682},{"_id":"themes/pure/README.cn.md","hash":"7facc2f8aadaf4c172dfc931bebcc37b9ef3d7e8","modified":1647331694433},{"_id":"themes/pure/package.json","hash":"d5bad0f074925c46e8ee5a75d385346d2fcea850","modified":1647331694449},{"_id":"themes/pure/layout/about.ejs","hash":"4b64515ccc801cc9eba637a1e1909c6c4dd203f6","modified":1647331694447},{"_id":"themes/pure/LICENSE","hash":"82ce1e15ddeabeaaca60e2186b5a3ce42b1a9c49","modified":1647331694433},{"_id":"source/_posts/部署Hexo到Github-pages/01.png","hash":"be997f14f3ba55f5723754594ea9a422a22b8c3e","modified":1648629440853},{"_id":"themes/pure/_config.yml.example","hash":"a3b55d01598967db40da6f740b38cdba4f17d7bc","modified":1647331694434},{"_id":"themes/pure/layout/books.ejs","hash":"75cbd31d3551c730e8a683bd5b08562881a95b51","modified":1647331694448},{"_id":"themes/pure/README.md","hash":"94fe451bf920cec6152e7bf9cbff4ccf0af0febc","modified":1647331694433},{"_id":"themes/pure/layout/index.ejs","hash":"44418dbf1fb82392b8e1e4cc910d16a383190433","modified":1647331694448},{"_id":"themes/pure/layout/categories.ejs","hash":"9cc7b5f5af40fd7ec641bf0f5a5f8f1ce1ac22d5","modified":1647331694448},{"_id":"themes/pure/layout/archive.ejs","hash":"62847ac8ce2562908c01d69f7f6886e24a6ded40","modified":1647331694448},{"_id":"themes/pure/layout/category.ejs","hash":"b3f7a96fbaf201a65ed64d509edc29976542fbfb","modified":1647331694448},{"_id":"themes/pure/layout/links.ejs","hash":"ee90a5f2a9d19bc02682ea3a59177b947f7f7284","modified":1647331694448},{"_id":"themes/pure/layout/repository.ejs","hash":"0ecad33b6c1ec741eb3b02bb47a3824ac3749d09","modified":1647331694449},{"_id":"themes/pure/layout/post.ejs","hash":"fbfed3c882059e757b23ff57924400683631594b","modified":1647331694449},{"_id":"themes/pure/layout/page.ejs","hash":"fbfed3c882059e757b23ff57924400683631594b","modified":1647331694449},{"_id":"themes/pure/layout/layout.ejs","hash":"71bdeba7b8be0c4f56a87ad05da2c6d4254da55e","modified":1647331694448},{"_id":"themes/pure/layout/tags.ejs","hash":"76bc71f3dfd8a5b1aa14b09dec7b460b14f5028a","modified":1647331694449},{"_id":"themes/pure/layout/tag.ejs","hash":"30d8ddd84c9aa87dff1be02af308097cf4e72448","modified":1647331694449},{"_id":"themes/pure/languages/default.yml","hash":"ed342f9158f13fafaf51baa4cc89df4d8aa31720","modified":1647331694437},{"_id":"themes/pure/languages/en.yml","hash":"ed342f9158f13fafaf51baa4cc89df4d8aa31720","modified":1647331694437},{"_id":"themes/pure/languages/zh-TW.yml","hash":"387ad2ca1b2a01dac36f768a6116a2033c3ac142","modified":1647331694437},{"_id":"themes/pure/languages/zh-CN.yml","hash":"399061d959807b41e333808b4c7851ca290a82fe","modified":1647331694437},{"_id":"themes/pure/scripts/thumbnail.js","hash":"4a7385e533f3567758bc995a8be5eb3e7839ac9c","modified":1647331694462},{"_id":"themes/pure/source/favicon.png","hash":"89875d3b018552e396fc5f0bd8ff5d9f5d4a5d71","modified":1647331694465},{"_id":"themes/pure/source/party.png","hash":"1d2ce62b378f6d9fb49e72c151f20e77b569c1f4","modified":1647331694473},{"_id":"themes/pure/source/party-big.png","hash":"c25f0f32b77040cccc5c5ff2acec805f96682065","modified":1647331694472},{"_id":"themes/pure/.github/ISSUE_TEMPLATE/custom.md","hash":"a3b49dff53b405dbafe2e96834313fc329710007","modified":1647331694433},{"_id":"themes/pure/.github/ISSUE_TEMPLATE/feature_request.md","hash":"205a69ba038cf76affcdc1f39d88a8cb8079fc12","modified":1647331694433},{"_id":"themes/pure/_source/_data/links.yml","hash":"a5e31f35ebb8e1e8811f2e3d957cf4d4835aa2f9","modified":1647331694435},{"_id":"themes/pure/_source/_data/gallery.yml","hash":"eef9b025c2a81fdc714967d0c7b21bed9d55cff5","modified":1647331694435},{"_id":"themes/pure/_source/404/index.md","hash":"16638b081d796638565ca462f3c87339b9a0577e","modified":1647331694434},{"_id":"themes/pure/_source/about/index.md","hash":"b72470146e8244886e15715e0cae79b4130305e8","modified":1647331694435},{"_id":"themes/pure/_source/books/index.md","hash":"d913d58987f539ac2ca4cca366ebf42f8b1a03d1","modified":1647331694435},{"_id":"themes/pure/_source/categories/index.md","hash":"b0006184ce9570766e7c7507d20fede1079f4992","modified":1647331694435},{"_id":"themes/pure/_source/links/index.md","hash":"d768332d0d322fe39267dbbda05b931488c27d7e","modified":1647331694436},{"_id":"themes/pure/_source/repository/index.md","hash":"bf2bec13066d7d53fc05a334876eb482e6f95825","modified":1647331694436},{"_id":"themes/pure/_source/tags/index.md","hash":"c35ba8af5acf41102909a9f9c1349a24d89f97a6","modified":1647331694436},{"_id":"themes/pure/layout/_common/footer.ejs","hash":"caec54ce31577207e1fd31aefa017bde99a8027c","modified":1647331694437},{"_id":"themes/pure/layout/_common/header.ejs","hash":"c05070274965692a270c7e07ad9f4dad6f2c5888","modified":1647331694438},{"_id":"themes/pure/.github/ISSUE_TEMPLATE/bug_report.md","hash":"16dbe91b392ef9debb7abeffde473668d3337eb2","modified":1647331694433},{"_id":"themes/pure/layout/_common/script.ejs","hash":"3045da0c1979946694b628fbef39c01cc98b6e75","modified":1647331694438},{"_id":"themes/pure/layout/_common/social.ejs","hash":"2bcdc7b0ee3905e724b01c2efa1ca6b47a846e1f","modified":1647331694438},{"_id":"themes/pure/layout/_partial/archive-book.ejs","hash":"944913dcabd09c10d3014c844abf851f4dfdba8d","modified":1647331694438},{"_id":"themes/pure/layout/_common/head.ejs","hash":"4135b80c40cc970f9dc30fdd02e4f3e0a8b0af67","modified":1647331694438},{"_id":"themes/pure/layout/_partial/archive-link.ejs","hash":"a8a387f9e7289a6524cf46d7ab76c34fff37f4bf","modified":1647331694439},{"_id":"themes/pure/layout/_partial/archive-category.ejs","hash":"4be88eec64fd40c7e1b74df8ccb6c8cdfa3e7a17","modified":1647331694438},{"_id":"themes/pure/layout/_partial/archive-post.ejs","hash":"513892fae41de4e68963c95a9358285714274bb4","modified":1647331694439},{"_id":"themes/pure/layout/_partial/archive-list.ejs","hash":"15ebb5d7cc3f07e6bf5ffa783c3d2feabd252fc1","modified":1647331694439},{"_id":"themes/pure/layout/_partial/archive-tag.ejs","hash":"db8cba32bf6655a8d21fe8c8ccd0695b049e1d4c","modified":1647331694439},{"_id":"themes/pure/layout/_partial/archive-repository.ejs","hash":"6408e37ec1a8ee868cf36d5b0e020d5d97ea2f27","modified":1647331694439},{"_id":"themes/pure/layout/_partial/archive.ejs","hash":"c196b54f92eff017a48e02bacc029dd82edc8cf9","modified":1647331694439},{"_id":"themes/pure/layout/_partial/article-about.ejs","hash":"47bbb53fe9cca05928c45782c6897c8a94d597ff","modified":1647331694440},{"_id":"themes/pure/layout/_partial/item-post.ejs","hash":"c5d1add53ce45df5f851f19023b2e4f16dad43ef","modified":1647331694440},{"_id":"themes/pure/layout/_partial/sidebar-toc.ejs","hash":"1d90de80d5eb2b10be6cad6fa0bfb465cbc5c9f1","modified":1647331694442},{"_id":"themes/pure/layout/_partial/sidebar.ejs","hash":"a6662f79f7fd6f1cc9b5180672ba8e1d0192fbe2","modified":1647331694442},{"_id":"themes/pure/layout/_partial/pagination.ejs","hash":"cc450ee5638f180332b3c4b747c5337b89d5a0c8","modified":1647331694440},{"_id":"themes/pure/layout/_partial/sidebar-about.ejs","hash":"17787edc304543c8658c7f51076022bda6ad227d","modified":1647331694442},{"_id":"themes/pure/layout/_partial/article.ejs","hash":"8af3bcfc07c344cefa0655dbe83f3c1a55954899","modified":1647338771841},{"_id":"themes/pure/layout/_script/analytics.ejs","hash":"db2967c6902ceb67caa70364935ef3441b10432f","modified":1647331694444},{"_id":"themes/pure/layout/_script/douban.ejs","hash":"6e671c659b282b690a5d61e842b5d5f38dced6d7","modified":1647331694445},{"_id":"themes/pure/layout/_script/fancybox.ejs","hash":"4558b5713926735d874deb14d8b21ed2e597b714","modified":1647331694445},{"_id":"themes/pure/layout/_script/mathjax.ejs","hash":"7a64d98212769423425102a441fca52eb6930fff","modified":1647331694445},{"_id":"themes/pure/layout/_script/pv.ejs","hash":"a464706b7a903e25d34b104bdfb298b260abc132","modified":1647331694445},{"_id":"themes/pure/layout/_script/search.ejs","hash":"2b784d15581df4309f56682896b725da7d44fcdd","modified":1647331694446},{"_id":"themes/pure/layout/_search/baidu.ejs","hash":"89848cc8e0190ca76cc26d42c6880a23e370702e","modified":1647331694446},{"_id":"themes/pure/layout/_script/repository.ejs","hash":"e2f8ba48f7a659c74d5fc38930b873c167671044","modified":1647331694445},{"_id":"themes/pure/layout/_script/comment.ejs","hash":"d5c98ab345952bb11d9ee69a9c1e3432b6760c55","modified":1647331694445},{"_id":"themes/pure/layout/_search/insight.ejs","hash":"14b1ec0bdb911ab6d92046c78d371264afc4fb19","modified":1647331694446},{"_id":"themes/pure/layout/_search/index-mobile.ejs","hash":"5e9a5cc9bdc05fabf939db494c3937cc0df48a72","modified":1647331694446},{"_id":"themes/pure/layout/_search/index.ejs","hash":"2c1f06dac5710e5fd073f3e5739545f3f6a0a56f","modified":1647331694446},{"_id":"themes/pure/layout/_widget/archive.ejs","hash":"b250fb0f63286f9648cd8bf428bed6a88901b481","modified":1647331694447},{"_id":"themes/pure/layout/_search/swiftype.ejs","hash":"dc548a83c33b5a598683bf2e1cb723bc3be4a76b","modified":1647331694446},{"_id":"themes/pure/layout/_widget/board.ejs","hash":"9811bab46dcf436c6d05ae78acd62bc25751df78","modified":1647331694447},{"_id":"themes/pure/layout/_widget/category.ejs","hash":"83c8ce4b099951d58b2be5006f6963afbbe7d4e9","modified":1647331694447},{"_id":"themes/pure/layout/_widget/tag.ejs","hash":"24823a881a6c15fd846c7f4780eb90fe869a813b","modified":1647331694447},{"_id":"themes/pure/layout/_widget/tagcloud.ejs","hash":"e6967ec160b93a5f466a73a36745833e644d04c0","modified":1647331694447},{"_id":"themes/pure/source/fonts/README.md","hash":"b5b2aac1b36a86dac2217d242d650e026c5a3b0c","modified":1647331694465},{"_id":"themes/pure/layout/_widget/recent_posts.ejs","hash":"8932ce5283a7e6a356c6840104a7d6984f2ea986","modified":1647331694447},{"_id":"themes/pure/source/fonts/iconfont.eot","hash":"6819d9bb643bdeafc17bfecb0746ae641b018fdf","modified":1647331694465},{"_id":"themes/pure/source/fonts/iconfont.ttf","hash":"9b8837f9f79cf6ab794736301d0665345183a20c","modified":1647331694466},{"_id":"themes/pure/source/fonts/iconfont.woff","hash":"78d29194287b8885d25212048c4f787705212a6e","modified":1647331694467},{"_id":"themes/pure/source/js/application.js","hash":"c29f52f5ed2d1a5d8185b115f2962d22e707e19e","modified":1647331694469},{"_id":"themes/pure/source/js/application.min.js","hash":"34d765e982c7d6360c37f82202d99f63ac40e408","modified":1647331694469},{"_id":"themes/pure/source/js/insight.js","hash":"a1b773d9ce470bf0e2f8fdca1b6fac2ac3d31aeb","modified":1647331694469},{"_id":"themes/pure/source/images/labixiaoxin.jpg","hash":"990119cc0abfce452d33539ce7a3b55cfe7511d5","modified":1647331694468},{"_id":"themes/pure/source/images/xingqiu-qrcode.jpg","hash":"ef2c2848dc79db6df7c752510651ed8ba57f2daf","modified":1647331694469},{"_id":"themes/pure/source/images/thumb-default.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1647331694468},{"_id":"themes/pure/layout/_partial/post/category.ejs","hash":"20ef0d47ec3d2de7d94db9778ddac092dc2bd4b5","modified":1647331694440},{"_id":"themes/pure/layout/_partial/post/copyright.ejs","hash":"56ad8e7d0b2247b9a30193d93db33714b1a92f46","modified":1647336204261},{"_id":"themes/pure/layout/_partial/post/date.ejs","hash":"8cbaef422bd7f3d1581d1198dd1c36e4c0e1e46e","modified":1647331694441},{"_id":"themes/pure/layout/_partial/post/gallery.ejs","hash":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca","modified":1647331694441},{"_id":"themes/pure/layout/_partial/post/comment.ejs","hash":"0ef132fc45042b28411e3334e77b6e2a7f47fae2","modified":1647331694440},{"_id":"themes/pure/layout/_partial/post/donate.ejs","hash":"bdef9836ca91b3e45498a9d98bcaec69e6627ced","modified":1647331694441},{"_id":"themes/pure/layout/_partial/post/pv.ejs","hash":"946f4bcfa5e5dc4d60c05916c8187bd2c06d1a95","modified":1647331694441},{"_id":"themes/pure/layout/_partial/post/nav.ejs","hash":"5b4119092b890c156a4e85e15be2cbcebf89fcbd","modified":1647331694441},{"_id":"themes/pure/layout/_partial/post/tag.ejs","hash":"8fd470b8d52606a90d475f7da9dbbed32742b1c9","modified":1647331694442},{"_id":"themes/pure/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1647331694442},{"_id":"themes/pure/layout/_script/_analytics/tencent-analytics.ejs","hash":"19585fc666e13a2816d74a8046998ac7fd36f75c","modified":1647331694443},{"_id":"themes/pure/layout/_partial/post/wordcount.ejs","hash":"81e9a89734505f54fef83dc74d2e277dab1bfa75","modified":1647331694442},{"_id":"themes/pure/layout/_partial/post/thumbnail.ejs","hash":"0d8b9a3aeaed95b74e292c593f0a8225711bfdca","modified":1647331694442},{"_id":"themes/pure/layout/_script/_search/insight.ejs","hash":"f95c3289c03fa084afce64e3c399cb5127707f56","modified":1647331694444},{"_id":"themes/pure/layout/_script/_analytics/google-analytics.ejs","hash":"4557389e499b89982eb005a821208fdd3dbac627","modified":1647331694443},{"_id":"themes/pure/layout/_script/_analytics/baidu-analytics.ejs","hash":"829778c19025882fe73cf1b297a36a9d0eff39a1","modified":1647331694443},{"_id":"themes/pure/layout/_script/_comment/disqus.ejs","hash":"98dac12a9cbf47098b49183893d714355e2e5999","modified":1647331694443},{"_id":"themes/pure/layout/_script/_search/baidu.ejs","hash":"72b48dcaab830b615c71f6e810e96100b715c682","modified":1647331694444},{"_id":"themes/pure/layout/_script/_comment/livere.ejs","hash":"2cc7b1cb7bdf157fe6470eb34a613963df75afa3","modified":1647331694444},{"_id":"themes/pure/layout/_script/_comment/gitalk.ejs","hash":"d6bf1cfaa9167dcfb9ffab20c6670c53a008e838","modified":1647331694443},{"_id":"themes/pure/layout/_script/_comment/gitment.ejs","hash":"0af71b5b354fdddd576fbd55c3aeb0221af71e7d","modified":1647331694443},{"_id":"themes/pure/source/images/donate/alipayimg.png","hash":"9562f23f2eb57841c65dc769b6cc43a2cf0efa94","modified":1647331694467},{"_id":"themes/pure/layout/_script/_comment/valine.ejs","hash":"19120669bfea521e0b9d2df5bf3a34f0ecb8bb68","modified":1647331694444},{"_id":"themes/pure/source/images/donate/wechatpayimg.png","hash":"c0844d9a633696cb00ae64fde06f0f924f63b596","modified":1647331694467},{"_id":"themes/pure/layout/_script/_comment/youyan.ejs","hash":"96fcc36560a8367e6c4ba9ec1e82d0c5a730b1b4","modified":1647331694444},{"_id":"themes/pure/source/images/favatar/chuangzaoshi-logo.png","hash":"7fa5734072050952159a02d330bbc008b5a99122","modified":1647331694468},{"_id":"themes/pure/source/images/favatar/SzsFox-logo.png","hash":"d71fcc73b7bc2a439d8c7ba461137856d190bd76","modified":1647331694468},{"_id":"themes/pure/source/images/favatar/idesign-logo.png","hash":"6b150a2dbb9912b7a7662255c27e4d4baaecee71","modified":1647331694468},{"_id":"source/_posts/更换博客主题/06.png","hash":"a10bb6dccc4929359908dc84254ab25d3bdf41e0","modified":1648629440795},{"_id":"source/_posts/更换博客主题/11.png","hash":"e3047d9a80729ed433874a82db5e04e09defc32d","modified":1648629440818},{"_id":"source/_posts/更换博客主题/12.png","hash":"692577fb856206afe9cbe2aa682c44c33d614c60","modified":1648629440821},{"_id":"themes/pure/screenshot/pure-theme-black.png","hash":"10b40f398af7eb7e8ba2bf2f2a959d8779fc1fe1","modified":1647331694450},{"_id":"themes/pure/screenshot/pure-theme-green.png","hash":"12ec0c6033cb2762839fdf75434bbb4fbf946022","modified":1647331694452},{"_id":"source/_posts/更换博客主题/04.png","hash":"f8d07594648404a466967fa2e1e3539b5bfea29f","modified":1648629440752},{"_id":"themes/pure/screenshot/pure-theme-blue.png","hash":"6146890a68d5ea9d343c48d50151ddd5a2a1872c","modified":1647331694451},{"_id":"themes/pure/screenshot/pure.png","hash":"8f4cfd8d7edfa4fbffdf375291302d9807f5cc1c","modified":1647331694454},{"_id":"themes/pure/screenshot/pure-theme-purple.png","hash":"9855d2eb0acd23370209354f232471df8f4f72e2","modified":1647331694453},{"_id":"themes/pure/source/js/jquery.min.js","hash":"dacc1f76630a9708add066819b1aabf8dce01056","modified":1647331694470},{"_id":"themes/pure/source/js/plugin.min.js","hash":"4eded164f8b6f5187fbf10065873ebeee5ab8787","modified":1647331694472},{"_id":"themes/pure/source/fonts/iconfont.svg","hash":"1af91521f1c29c231ffc19d7f64696ddcd71470b","modified":1647331694466},{"_id":"themes/pure/source/js/plugin.js.map","hash":"1730c0cc660f863120aca0a439d7264e2e245fc5","modified":1647331694471},{"_id":"themes/pure/source/css/style.css","hash":"fca937c3b6b2c631dc48d7bf2db062c425c3a084","modified":1647392010700},{"_id":"themes/pure/source/js/plugin.js","hash":"59cb2985d8d21653f0f80ef327517eca86af0ac6","modified":1647331694471},{"_id":"themes/pure/source/css/style.min.css","hash":"4e46cbfadf9f0c5c236239a163058a3f525492ce","modified":1647331694464},{"_id":"source/_posts/更换博客主题/01.png","hash":"ea007a103b8e5b52369f2382911ef8ef0b5b8228","modified":1648629440725},{"_id":"source/_posts/更换博客主题/02.png","hash":"81e91c7ee2f21c0331fad2d2ba7503e5f94531cb","modified":1648629440731},{"_id":"themes/pure/screenshot/pure.psd","hash":"a31cea40b45bdc31f051fca2f1e2f4ecbaee1a94","modified":1647331694462},{"_id":"public/baidusitemap.xml","hash":"60187095623c0e5f24928147ed70fb8dfc8d4943","modified":1649223349881},{"_id":"public/atom.xml","hash":"f3dfb1952ba1e11be2252d9af744329e46df34b1","modified":1649223349881},{"_id":"public/content.json","hash":"b9f2a48d655b34904ca5c093fa922994550cc740","modified":1649223349881},{"_id":"public/sitemap.xml","hash":"1b6c917b33124b87b1cf228bc6ef78082bf3f39c","modified":1649223349881},{"_id":"public/sitemap.txt","hash":"3590629baa284468742b572840075ae488ada61f","modified":1649223349881},{"_id":"public/links/index.html","hash":"43d120762aa4b5f55d89d4d6c295e758e934ec93","modified":1649223349881},{"_id":"public/archives/2022/04/index.html","hash":"77c804286c29ea36a8a076a99f582cc382274d50","modified":1649223349881},{"_id":"public/categories/网络/index.html","hash":"a4f883496ffb40e2c46e61febcedf83ae2e0d3e1","modified":1649223349881},{"_id":"public/tags/DNS/index.html","hash":"8804ae71d4cb8671f40b82456644e89d4b90a8f9","modified":1649223349881},{"_id":"public/tags/域名解析/index.html","hash":"d9576a616eef344d118519d6be99702df6d7789e","modified":1649223349881},{"_id":"public/about/index.html","hash":"0b7e7049dc5c12a2a95b5418129f9ef47ee6b3d2","modified":1649223349881},{"_id":"public/books/index.html","hash":"682b5a9c1ff9d7f1c5db37c7b0477118ee0134d7","modified":1649223349881},{"_id":"public/categories/index.html","hash":"f6613a7ae79ec4f17448a25b6ae226835791d876","modified":1649223349881},{"_id":"public/tags/index.html","hash":"e5f0a1bcff676ac8bdcb14536dfa7ee12aa5fdae","modified":1649223349881},{"_id":"public/repository/index.html","hash":"409c282f7b11fb88b4d12c6dabb07cfb1b0aaec9","modified":1649223349881},{"_id":"public/schedule/index.html","hash":"92912bb7fcf13cdeaef7eadace2628471dae153d","modified":1649223349881},{"_id":"public/思想/index.html","hash":"e110557f4e26b1cba1fd0ebd4cf35e361b3691bb","modified":1649223349881},{"_id":"public/思想/NewWorld.html","hash":"c9e19fdd677218ad6dded1ec9fc0909e1119f8e1","modified":1649223349881},{"_id":"public/设计模式/设计模式-工厂模式-9291bb2ccc7f/index.html","hash":"3d7a265975acb8ff83870f7f4071a01e10d886d9","modified":1649223349881},{"_id":"public/设计模式/设计模式-原型模式-0b54b6ca657c/index.html","hash":"2fd3bda9f427c1d69f69f5551b4cab1037cbeb8a","modified":1649223349881},{"_id":"public/博客搭建/集成GithubAction-e7401dd28c77/index.html","hash":"e5b3840dce89515e24e5645c309ae49478e62bd4","modified":1649223349881},{"_id":"public/博客搭建/域名解析-c101a3028bc7/index.html","hash":"3b4c6a588399f02b60270c49064e7c79e36d3525","modified":1649223349881},{"_id":"public/博客搭建/更换博客主题-41b8ba561387/index.html","hash":"0401c676beb1f13d0a3baa075f1c12669b20393e","modified":1649223349881},{"_id":"public/博客搭建/部署Hexo到Github-pages-a3a757356023/index.html","hash":"60ab733b502793cd51f2e95964314f5b9dc160e4","modified":1649223349881},{"_id":"public/博客搭建/使用hexo搭建个人blog-2d77129f8c92/index.html","hash":"fdc80a468e8073f6fe3f975b55e8157e2e6a9933","modified":1649223349881},{"_id":"public/网络/DNS-域名解析-836daf7bc346/index.html","hash":"0397d9ff8ba673678c74ae5172566475160f2eee","modified":1649223349881},{"_id":"public/archives/index.html","hash":"3c3a52c055df31eea5e9443c713f2b9368f3ec10","modified":1649223349881},{"_id":"public/archives/2022/index.html","hash":"8e1d4f102937c2bdfced9c4b7a97f6693da6f2a9","modified":1649223349881},{"_id":"public/archives/2022/03/index.html","hash":"633befbed3be6e6dfc8372f234f47b411cbfdbc3","modified":1649223349881},{"_id":"public/index.html","hash":"cf0741b0d73921fe80f3d105960cd88a781bf9cc","modified":1649223349881},{"_id":"public/categories/博客搭建/index.html","hash":"6f8710d27acf7ac7aa0af8131063b85136cc8576","modified":1649223349881},{"_id":"public/categories/设计模式/index.html","hash":"f231327026603589d836d8b1ac4da73741c9e35e","modified":1649223349881},{"_id":"public/tags/hexo/index.html","hash":"5ae7548a3cb3264258f781785720d58a9e2161e1","modified":1649223349881},{"_id":"public/tags/个人博客搭建/index.html","hash":"dbf58cd09a68776470372323300796eba5e4832d","modified":1649223349881},{"_id":"public/tags/设计模式/index.html","hash":"bbabe25f8d64e0291cac156e9a6ff2781aa6c836","modified":1649223349881},{"_id":"public/tags/design-pattern/index.html","hash":"305aee954c9d8e0d694a6fcf132584e5808cbd3f","modified":1649223349881},{"_id":"public/tags/原型模式/index.html","hash":"5ec583d86615f7e95c1bd103650d0b3c6416530c","modified":1649223349881},{"_id":"public/CNAME","hash":"2670b9e5c6853d4f92c752f39a7b1297b65c7ead","modified":1649223349881},{"_id":"public/party-big.png","hash":"c25f0f32b77040cccc5c5ff2acec805f96682065","modified":1649223349881},{"_id":"public/favicon.png","hash":"89875d3b018552e396fc5f0bd8ff5d9f5d4a5d71","modified":1649223349881},{"_id":"public/party.png","hash":"1d2ce62b378f6d9fb49e72c151f20e77b569c1f4","modified":1649223349881},{"_id":"public/fonts/iconfont.eot","hash":"6819d9bb643bdeafc17bfecb0746ae641b018fdf","modified":1649223349881},{"_id":"public/fonts/iconfont.ttf","hash":"9b8837f9f79cf6ab794736301d0665345183a20c","modified":1649223349881},{"_id":"public/fonts/iconfont.woff","hash":"78d29194287b8885d25212048c4f787705212a6e","modified":1649223349881},{"_id":"public/images/labixiaoxin.jpg","hash":"990119cc0abfce452d33539ce7a3b55cfe7511d5","modified":1649223349881},{"_id":"public/images/xingqiu-qrcode.jpg","hash":"ef2c2848dc79db6df7c752510651ed8ba57f2daf","modified":1649223349881},{"_id":"public/images/thumb-default.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1649223349881},{"_id":"public/images/donate/alipayimg.png","hash":"9562f23f2eb57841c65dc769b6cc43a2cf0efa94","modified":1649223349881},{"_id":"public/images/donate/wechatpayimg.png","hash":"c0844d9a633696cb00ae64fde06f0f924f63b596","modified":1649223349881},{"_id":"public/images/favatar/chuangzaoshi-logo.png","hash":"7fa5734072050952159a02d330bbc008b5a99122","modified":1649223349881},{"_id":"public/images/favatar/idesign-logo.png","hash":"6b150a2dbb9912b7a7662255c27e4d4baaecee71","modified":1649223349881},{"_id":"public/images/favatar/SzsFox-logo.png","hash":"d71fcc73b7bc2a439d8c7ba461137856d190bd76","modified":1649223349881},{"_id":"public/博客搭建/更换博客主题-41b8ba561387/03.png","hash":"a0c5b088c4748413ae6c7e288f8cebdf810c7a24","modified":1649223349881},{"_id":"public/博客搭建/更换博客主题-41b8ba561387/05.png","hash":"f11f00001871fa2e53945e9419c280600489545b","modified":1649223349881},{"_id":"public/博客搭建/更换博客主题-41b8ba561387/08.png","hash":"d424f9d87db7da507408c21803a46afe1792e864","modified":1649223349881},{"_id":"public/博客搭建/更换博客主题-41b8ba561387/07.png","hash":"19c79b66c66c277768b0c2bef2668fb927316a0f","modified":1649223349881},{"_id":"public/博客搭建/更换博客主题-41b8ba561387/09.png","hash":"3a2ae40ed8cefd1c409fc9ca06c61a581b359c98","modified":1649223349881},{"_id":"public/博客搭建/更换博客主题-41b8ba561387/10.png","hash":"3cd4e1f4c27ad49a832bd7dbb6660bb77fe05c4b","modified":1649223349881},{"_id":"public/博客搭建/更换博客主题-41b8ba561387/13.png","hash":"c30913264244710d7e4983e813cad3b8463f43cf","modified":1649223349881},{"_id":"public/设计模式/设计模式-原型模式-0b54b6ca657c/01.png","hash":"315c97a77c3336e92a6139bd91c4edfcabd33c7c","modified":1649223349881},{"_id":"public/设计模式/设计模式-工厂模式-9291bb2ccc7f/factory_simple.png","hash":"1072b0e55333887bfc2b8a9c5c0b5058c7ecda3e","modified":1649223349881},{"_id":"public/设计模式/设计模式-工厂模式-9291bb2ccc7f/fac_complex.png","hash":"7c34cbcc5a169560f3846c95277bb4c0e8cd7bfe","modified":1649223349881},{"_id":"public/博客搭建/部署Hexo到Github-pages-a3a757356023/01.png","hash":"be997f14f3ba55f5723754594ea9a422a22b8c3e","modified":1649223349881},{"_id":"public/博客搭建/部署Hexo到Github-pages-a3a757356023/02.png","hash":"7a09779cdbdaca93fd60a79181f96ef04cde4cc4","modified":1649223349881},{"_id":"public/博客搭建/部署Hexo到Github-pages-a3a757356023/03.png","hash":"cb13ef0b7c52b7e491203334c8e757cd4779cc6e","modified":1649223349881},{"_id":"public/博客搭建/集成GithubAction-e7401dd28c77/01.png","hash":"812948af461ed90ea0646df03fe5c927b0f42653","modified":1649223349881},{"_id":"public/博客搭建/集成GithubAction-e7401dd28c77/02.png","hash":"6e57eaf782b279175eb624f589c42de460284fcf","modified":1649223349881},{"_id":"public/博客搭建/集成GithubAction-e7401dd28c77/03.png","hash":"825b0ffddf3c58d134b9eecc1f25ea4298b1f0fb","modified":1649223349881},{"_id":"public/fonts/README.html","hash":"3b9daaf126709e3bbce5926e15d599f1fe877921","modified":1649223349881},{"_id":"public/js/application.min.js","hash":"34d765e982c7d6360c37f82202d99f63ac40e408","modified":1649223349881},{"_id":"public/js/application.js","hash":"46d1fb207ce5f0acb83803f927985dfcea86f9ef","modified":1649223349881},{"_id":"public/js/insight.js","hash":"298e8ca42517984bd26f34caa4c45560b0e909ad","modified":1649223349881},{"_id":"public/css/style.css","hash":"a115348d8810a8d6b608ffc7bb02b915b3f48534","modified":1649223349881},{"_id":"public/css/style.min.css","hash":"1d23abc76726ebe042f7df4749f00f8f73338444","modified":1649223349881},{"_id":"public/js/jquery.min.js","hash":"5a9dcfbef655a2668e78baebeaa8dc6f41d8dabb","modified":1649223349881},{"_id":"public/js/plugin.min.js","hash":"07fe34638f9832702c5f81d8583c5e4e8b3d9659","modified":1649223349881},{"_id":"public/js/plugin.js","hash":"a8524d42b8621bfaa06602a163c6a1f82702b91d","modified":1649223349881},{"_id":"public/fonts/iconfont.svg","hash":"1af91521f1c29c231ffc19d7f64696ddcd71470b","modified":1649223349881},{"_id":"public/博客搭建/更换博客主题-41b8ba561387/04.png","hash":"f8d07594648404a466967fa2e1e3539b5bfea29f","modified":1649223349881},{"_id":"public/js/plugin.js.map","hash":"1730c0cc660f863120aca0a439d7264e2e245fc5","modified":1649223349881},{"_id":"public/博客搭建/更换博客主题-41b8ba561387/11.png","hash":"e3047d9a80729ed433874a82db5e04e09defc32d","modified":1649223349881},{"_id":"public/博客搭建/更换博客主题-41b8ba561387/06.png","hash":"a10bb6dccc4929359908dc84254ab25d3bdf41e0","modified":1649223349881},{"_id":"public/博客搭建/更换博客主题-41b8ba561387/12.png","hash":"692577fb856206afe9cbe2aa682c44c33d614c60","modified":1649223349881},{"_id":"public/博客搭建/更换博客主题-41b8ba561387/02.png","hash":"81e91c7ee2f21c0331fad2d2ba7503e5f94531cb","modified":1649223349881},{"_id":"public/博客搭建/更换博客主题-41b8ba561387/01.png","hash":"ea007a103b8e5b52369f2382911ef8ef0b5b8228","modified":1649223349881}],"Category":[{"name":"网络","_id":"cl1n502ri0004z8ts6yqj9u9l"},{"name":"博客搭建","_id":"cl1n502rm000cz8ts6mo9a35t"},{"name":"设计模式","_id":"cl1n502s9000wz8ts5tw05tr8"},{"name":"程序日志","_id":"cl1n502t3001yz8tsa6a1c6x3"}],"Data":[{"_id":"styles","data":"body {\n  background: url(\"images/blogNew.jpg\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n"}],"Page":[{"title":"about","date":"2022-03-02T13:48:10.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2022-03-02 21:48:10\n---\n","updated":"2022-03-14T04:24:14.903Z","path":"about/index.html","comments":1,"layout":"page","_id":"cl1n502py0000z8ts3prp3gar","content":"","site":{"data":{"styles":"body {\n  background: url(\"images/blogNew.jpg\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n"}},"excerpt":"","more":""},{"title":"书单","layout":"books","comments":0,"sidebar":"none","_content":"","source":"books/index.md","raw":"---\ntitle: 书单\nlayout: books\ncomments: false\nsidebar: none\n---","date":"2022-03-16T00:32:25.980Z","updated":"2022-03-15T08:08:14.432Z","path":"books/index.html","_id":"cl1n502rg0002z8tsbeaa0xpv","content":"","site":{"data":{"styles":"body {\n  background: url(\"images/blogNew.jpg\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n"}},"excerpt":"","more":""},{"title":"分类","date":"2022-02-23T13:35:44.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2022-02-23 21:35:44\ntype: \"categories\"\ncomments: false\n---\n","updated":"2022-03-14T04:24:14.903Z","path":"categories/index.html","layout":"page","_id":"cl1n502rj0006z8ts5tli4m3b","content":"","site":{"data":{"styles":"body {\n  background: url(\"images/blogNew.jpg\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n"}},"excerpt":"","more":""},{"title":"友情链接","layout":"links","comments":1,"sidebar":"none","_content":"","source":"links/index.md","raw":"---\ntitle: 友情链接\nlayout: links\ncomments: true\nsidebar: none\n---","date":"2022-03-15T08:08:14.432Z","updated":"2022-03-15T08:08:14.432Z","path":"links/index.html","_id":"cl1n502rk0008z8ts0f3b0c90","content":"","site":{"data":{"styles":"body {\n  background: url(\"images/blogNew.jpg\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n"}},"excerpt":"","more":""},{"title":"标签","date":"2022-02-23T13:35:54.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2022-02-23 21:35:54\ntype: \"tags\"\ncomments: false\n---\n","updated":"2022-03-14T04:24:14.903Z","path":"tags/index.html","layout":"page","_id":"cl1n502rl000az8ts8aae3sx0","content":"","site":{"data":{"styles":"body {\n  background: url(\"images/blogNew.jpg\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n"}},"excerpt":"","more":""},{"title":"Repositories","layout":"repository","comments":0,"sidebar":"none","_content":"","source":"repository/index.md","raw":"---\ntitle: Repositories\nlayout: repository\ncomments: false\nsidebar: none\n---\n","date":"2022-03-16T00:32:13.339Z","updated":"2022-03-15T08:08:14.432Z","path":"repository/index.html","_id":"cl1n502rm000ez8ts9ga5gyuu","content":"","site":{"data":{"styles":"body {\n  background: url(\"images/blogNew.jpg\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n"}},"excerpt":"","more":""},{"title":"日程表","date":"2022-02-23T13:36:26.000Z","type":"schedule","comments":0,"_content":"","source":"schedule/index.md","raw":"---\ntitle: 日程表\ndate: 2022-02-23 21:36:26\ntype: \"schedule\"\ncomments: false\n---\n","updated":"2022-03-14T04:24:14.903Z","path":"schedule/index.html","layout":"page","_id":"cl1n502ro000gz8ts6f87763v","content":"","site":{"data":{"styles":"body {\n  background: url(\"images/blogNew.jpg\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n"}},"excerpt":"","more":""},{"title":"思想","date":"2022-03-19T03:31:13.000Z","_content":"","source":"思想/index.md","raw":"---\ntitle: 思想\ndate: 2022-03-19 11:31:13\n---\n","updated":"2022-03-30T08:37:20.894Z","path":"思想/index.html","comments":1,"layout":"page","_id":"cl1n502s5000lz8tsc7fw06w2","content":"","site":{"data":{"styles":"body {\n  background: url(\"images/blogNew.jpg\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n"}},"excerpt":"","more":""},{"_content":"","source":"思想/NewWorld.md","raw":"","date":"2022-03-30T08:37:20.892Z","updated":"2022-03-30T08:37:20.892Z","path":"思想/NewWorld.html","title":"","comments":1,"layout":"page","_id":"cl1n502s6000oz8tsbax93r1b","content":"","site":{"data":{"styles":"body {\n  background: url(\"images/blogNew.jpg\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n"}},"excerpt":"","more":""}],"Post":[{"title":"DNS 域名解析--详解","date":"2022-03-13T12:08:56.000Z","_content":"\n因为网络中数据的传输是通过 `TCP/IP`协议来完成的，在该协议中传输需要知道对端的 `IP`地址，然后通过 `IP`地址完成数据的传输。\n\n那当用户在浏览器中输入域名时，这个域名是如何被转换成 `IP`地址来完成数据传输的呢？\n\n<!-- more -->\n\n这就是通过域名解析来完成的，域名解析这个词有点抽象，但是换个词可能就比较好理解了，比如：`IP`登记，域名指向等\n\n就 `IP` 登记而言，这个词就表明存在这么一个登记处，如果你想你的网站被别人能够访问到，就需要到这个登记处进行登记，在你登记的时候域名就相当于你的名字，`IP`就相当于你的住址；这样其他用户就可以通过域名来访问你的网站了，不再需要记住那些难记的 `IP`地址了\n\n上面所说的` IP` 登记处就是` DNS` 服务器了，每次当你在浏览器输入一个域名时，都会向` DNS` 请求这个域名对应的` IP `地址，找到之后再通过` IP` 完成具体的访问操作\n\n##### 是谁帮你完成域名解析的呢\n\n因为浏览器本身不具备将消息发送到网络中的功能，所以这一步就是委托操作系统来完成的\n\n操作系统在接收到请求之后，如果是看到是` IP` 则直接发送到下一层了；如果是域名，则就把域名发给`DNS`客户端，然后由 `DNS` 客户端去连接你网络配置的 `DNS` 服务器，连接之后请求返回该域名对应的` IP`，获取到` IP` 之后再交给操作系统，然后继续完成之后的网络请求操作\n\n##### 如果本机配置的 DNS 服务器没有找到该域名对应的 IP 怎么办呢\n\n每个联网的终端，都会配置一个 `DNS`服务器，即便是你没有主动的配置，则每次上网时也会由网关自动分配（这种由网关分配的机制就是 `DHCP`）\n\n当你在浏览器输入域名之后，OS就会到这个 `DNS` 服务器上去请求域名对应的`IP` 地址，如果请求到，则继续完成之前的请求；如果没有请求到，则就会进行分级查询了\n\n##### 域名的层级\n\n在了解域名的分级查询之前，先看一下域名的层级，因为就是通过域名的层级进行分级查询的；\n\n下面是百度的域名\n\n```\nwww.baidu.com.\n```\n\n通过域名解析工具，可以看到其实百度官网域名的后面会带一个`.`,这是因为所有的域名的尾部都会有一个根域名，完整的百度的域名应该是：\n\n```\nwww.baidu.com.root\n```\n\n因为根域名`root`对所有的域名都一样的，所以平时都会省略点，就变成了`https://www.baidu.com.`\n\n根域名的下一级域名叫做\"顶级域名\"（top-level domain，缩写 TLD），比如像`.com,.net`这些；\n\n再下一级的域名叫做二级域名（second-level domain，缩写 SLD），如：`https://www.baidu.com.`中的`.baidu`，这一级的域名是用户可以注册到的；\n\n再下一级的域名就是三级域名也是主机名，如：`www`，这是用户在自己的域里为服务器配置的名称，是用户可以任意分配的\n\n##### 分级查询\n\n所谓的分级查询就是当你在你配置的 DNS 服务器中找不到域名对应的 IP 之后，由当前的 DNS 服务器向根域名服务器发起的请求\n\n首先说明一点，每一级域名都有自己的 `NS（Name Server）` 记录（记录域名服务器的记录，就是指定那些域名该有哪个 DNS 服务器来解析）\n\n分级查询是从根域名开始，依次查找每一级域名的 NS 记录，找到查到最终的 IP 地址为止，具体查找过程如下：\n\n```\n1. 从 根域名服务器 找到顶级域名服务器的 NS 记录和 IP 地址\n2. 从 顶级域名服务器 找到二级域名服务器的 NS 记录和 IP 地址\n3. 从 二级域名服务器 找到 三级域名（主机名）的 IP 地址\n```\n\n那在分级查询到第一步中是如何知道根域名服务器的地址的呢\n\n这是因为根域名服务器的 NS 记录和 IP 地址一般不会变，所以通常是内置在 DNS 服务器当中的\n\n#### DNS 缓存\n\n如果每次都需要这么解析一遍那么访问一个网站就会变的很慢了，同时也会对根域名服务器造成压力\n\n因此通常就会对 DNS 解析的记录进行缓存，通常有两种缓存的方式：\n\n###### 浏览器缓存\n\n浏览器缓存就是每次会对访问过的域名对应的 IP 缓存起来，当然这个缓存的时间也是根据不同的浏览器的厂商而定的；谷歌的一般是缓存一分钟，也可以在谷歌浏览器中输入：`chrome://net-internals/#dns`来清除缓存\n\nOS缓存\n\n另外一种就是操作系统对于 DNS 的缓存，每次 DNS Client 请求得到的解析记录都会有一个 TTL 值，这个就是 DNS 服务器提供的 DNS 解析结果的最长存活时间，OS 缓存的 DNS 就会参考这个时间，但是不会完全的等于这个时间；通过命令`ipconfig/displaydns`就可以查看到本机的 DNS 缓存；也可以使用命令`ipconfig/flushdns`来清除这些缓存\n\n##### DNS 劫持\n\n上面介绍了 DNS 域名解析的原理，现在又有了一个新的问题：什么是 DNS 劫持？\n\n正常情况下我们在浏览器输入请求后，OS 都会先到本机的 `hosts`文件查看是否有域名对应的 IP ，如果有则直接通过这个 IP 进行访问就可以了，如果没有，则就会到网络配置的 DNS 服务器上去获取当前域名对应的 IP 地址\n\n但是，如果现在有一个木马程序，入侵你的电脑之后更改了你的 `hosts`文件，将你访问的百度的域名对应到一个广告网站或者是其他的恶意网站，此时你再访问`www.baidu.com`的时候出现的就不会是百度的首页了，而是修改之后的恶意网站了，这就是本地 DNS 劫持\n\n本地 DNS 劫持就是因为病毒的入侵，所以你要安装杀毒软件，经常扫描；当然还需要开启防火墙，这样就可以防止病毒的入侵了\n\n除了本地的 DNS 劫持外，还有就是路由器的 DNS 劫持，现在市场上的路由器的质量层级不齐，并且很多的用户买了路由器之后使用的还是默认的密码，所以很容易遭到攻击；\n\n攻击获得管理权限之后，篡改路由器上设置的 DNS 服务器的地址，使其指向恶意的 DNS 服务器，这样当你发送请求的时候就会给你返回恶意网站的 IP地址；所以为了避免这种情况需要加强对路由器账号密码的管理，防止被恶意用户获取到路由器权限\n\n第三种劫持就是攻击权威的 DNS 服务器，导致 DNS 服务器停止服务，还可以使用一些手段感染 DNS 缓存，给用户返回恶意的 IP 地址","source":"_posts/DNS-域名解析.md","raw":"---\ntitle: DNS 域名解析--详解\ndate: 2022-03-13 20:08:56\ncategories:\n- 网络\ntags:\n- DNS\n- 域名解析\n---\n\n因为网络中数据的传输是通过 `TCP/IP`协议来完成的，在该协议中传输需要知道对端的 `IP`地址，然后通过 `IP`地址完成数据的传输。\n\n那当用户在浏览器中输入域名时，这个域名是如何被转换成 `IP`地址来完成数据传输的呢？\n\n<!-- more -->\n\n这就是通过域名解析来完成的，域名解析这个词有点抽象，但是换个词可能就比较好理解了，比如：`IP`登记，域名指向等\n\n就 `IP` 登记而言，这个词就表明存在这么一个登记处，如果你想你的网站被别人能够访问到，就需要到这个登记处进行登记，在你登记的时候域名就相当于你的名字，`IP`就相当于你的住址；这样其他用户就可以通过域名来访问你的网站了，不再需要记住那些难记的 `IP`地址了\n\n上面所说的` IP` 登记处就是` DNS` 服务器了，每次当你在浏览器输入一个域名时，都会向` DNS` 请求这个域名对应的` IP `地址，找到之后再通过` IP` 完成具体的访问操作\n\n##### 是谁帮你完成域名解析的呢\n\n因为浏览器本身不具备将消息发送到网络中的功能，所以这一步就是委托操作系统来完成的\n\n操作系统在接收到请求之后，如果是看到是` IP` 则直接发送到下一层了；如果是域名，则就把域名发给`DNS`客户端，然后由 `DNS` 客户端去连接你网络配置的 `DNS` 服务器，连接之后请求返回该域名对应的` IP`，获取到` IP` 之后再交给操作系统，然后继续完成之后的网络请求操作\n\n##### 如果本机配置的 DNS 服务器没有找到该域名对应的 IP 怎么办呢\n\n每个联网的终端，都会配置一个 `DNS`服务器，即便是你没有主动的配置，则每次上网时也会由网关自动分配（这种由网关分配的机制就是 `DHCP`）\n\n当你在浏览器输入域名之后，OS就会到这个 `DNS` 服务器上去请求域名对应的`IP` 地址，如果请求到，则继续完成之前的请求；如果没有请求到，则就会进行分级查询了\n\n##### 域名的层级\n\n在了解域名的分级查询之前，先看一下域名的层级，因为就是通过域名的层级进行分级查询的；\n\n下面是百度的域名\n\n```\nwww.baidu.com.\n```\n\n通过域名解析工具，可以看到其实百度官网域名的后面会带一个`.`,这是因为所有的域名的尾部都会有一个根域名，完整的百度的域名应该是：\n\n```\nwww.baidu.com.root\n```\n\n因为根域名`root`对所有的域名都一样的，所以平时都会省略点，就变成了`https://www.baidu.com.`\n\n根域名的下一级域名叫做\"顶级域名\"（top-level domain，缩写 TLD），比如像`.com,.net`这些；\n\n再下一级的域名叫做二级域名（second-level domain，缩写 SLD），如：`https://www.baidu.com.`中的`.baidu`，这一级的域名是用户可以注册到的；\n\n再下一级的域名就是三级域名也是主机名，如：`www`，这是用户在自己的域里为服务器配置的名称，是用户可以任意分配的\n\n##### 分级查询\n\n所谓的分级查询就是当你在你配置的 DNS 服务器中找不到域名对应的 IP 之后，由当前的 DNS 服务器向根域名服务器发起的请求\n\n首先说明一点，每一级域名都有自己的 `NS（Name Server）` 记录（记录域名服务器的记录，就是指定那些域名该有哪个 DNS 服务器来解析）\n\n分级查询是从根域名开始，依次查找每一级域名的 NS 记录，找到查到最终的 IP 地址为止，具体查找过程如下：\n\n```\n1. 从 根域名服务器 找到顶级域名服务器的 NS 记录和 IP 地址\n2. 从 顶级域名服务器 找到二级域名服务器的 NS 记录和 IP 地址\n3. 从 二级域名服务器 找到 三级域名（主机名）的 IP 地址\n```\n\n那在分级查询到第一步中是如何知道根域名服务器的地址的呢\n\n这是因为根域名服务器的 NS 记录和 IP 地址一般不会变，所以通常是内置在 DNS 服务器当中的\n\n#### DNS 缓存\n\n如果每次都需要这么解析一遍那么访问一个网站就会变的很慢了，同时也会对根域名服务器造成压力\n\n因此通常就会对 DNS 解析的记录进行缓存，通常有两种缓存的方式：\n\n###### 浏览器缓存\n\n浏览器缓存就是每次会对访问过的域名对应的 IP 缓存起来，当然这个缓存的时间也是根据不同的浏览器的厂商而定的；谷歌的一般是缓存一分钟，也可以在谷歌浏览器中输入：`chrome://net-internals/#dns`来清除缓存\n\nOS缓存\n\n另外一种就是操作系统对于 DNS 的缓存，每次 DNS Client 请求得到的解析记录都会有一个 TTL 值，这个就是 DNS 服务器提供的 DNS 解析结果的最长存活时间，OS 缓存的 DNS 就会参考这个时间，但是不会完全的等于这个时间；通过命令`ipconfig/displaydns`就可以查看到本机的 DNS 缓存；也可以使用命令`ipconfig/flushdns`来清除这些缓存\n\n##### DNS 劫持\n\n上面介绍了 DNS 域名解析的原理，现在又有了一个新的问题：什么是 DNS 劫持？\n\n正常情况下我们在浏览器输入请求后，OS 都会先到本机的 `hosts`文件查看是否有域名对应的 IP ，如果有则直接通过这个 IP 进行访问就可以了，如果没有，则就会到网络配置的 DNS 服务器上去获取当前域名对应的 IP 地址\n\n但是，如果现在有一个木马程序，入侵你的电脑之后更改了你的 `hosts`文件，将你访问的百度的域名对应到一个广告网站或者是其他的恶意网站，此时你再访问`www.baidu.com`的时候出现的就不会是百度的首页了，而是修改之后的恶意网站了，这就是本地 DNS 劫持\n\n本地 DNS 劫持就是因为病毒的入侵，所以你要安装杀毒软件，经常扫描；当然还需要开启防火墙，这样就可以防止病毒的入侵了\n\n除了本地的 DNS 劫持外，还有就是路由器的 DNS 劫持，现在市场上的路由器的质量层级不齐，并且很多的用户买了路由器之后使用的还是默认的密码，所以很容易遭到攻击；\n\n攻击获得管理权限之后，篡改路由器上设置的 DNS 服务器的地址，使其指向恶意的 DNS 服务器，这样当你发送请求的时候就会给你返回恶意网站的 IP地址；所以为了避免这种情况需要加强对路由器账号密码的管理，防止被恶意用户获取到路由器权限\n\n第三种劫持就是攻击权威的 DNS 服务器，导致 DNS 服务器停止服务，还可以使用一些手段感染 DNS 缓存，给用户返回恶意的 IP 地址","slug":"DNS-域名解析","published":1,"updated":"2022-03-16T05:39:01.844Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1n502rd0001z8ts3bd176wb","content":"<p>因为网络中数据的传输是通过 <code>TCP/IP</code>协议来完成的，在该协议中传输需要知道对端的 <code>IP</code>地址，然后通过 <code>IP</code>地址完成数据的传输。</p>\n<p>那当用户在浏览器中输入域名时，这个域名是如何被转换成 <code>IP</code>地址来完成数据传输的呢？</p>\n<span id=\"more\"></span>\n\n<p>这就是通过域名解析来完成的，域名解析这个词有点抽象，但是换个词可能就比较好理解了，比如：<code>IP</code>登记，域名指向等</p>\n<p>就 <code>IP</code> 登记而言，这个词就表明存在这么一个登记处，如果你想你的网站被别人能够访问到，就需要到这个登记处进行登记，在你登记的时候域名就相当于你的名字，<code>IP</code>就相当于你的住址；这样其他用户就可以通过域名来访问你的网站了，不再需要记住那些难记的 <code>IP</code>地址了</p>\n<p>上面所说的<code> IP</code> 登记处就是<code> DNS</code> 服务器了，每次当你在浏览器输入一个域名时，都会向<code> DNS</code> 请求这个域名对应的<code>IP</code>地址，找到之后再通过<code> IP</code> 完成具体的访问操作</p>\n<h5 id=\"是谁帮你完成域名解析的呢\"><a href=\"#是谁帮你完成域名解析的呢\" class=\"headerlink\" title=\"是谁帮你完成域名解析的呢\"></a>是谁帮你完成域名解析的呢</h5><p>因为浏览器本身不具备将消息发送到网络中的功能，所以这一步就是委托操作系统来完成的</p>\n<p>操作系统在接收到请求之后，如果是看到是<code> IP</code> 则直接发送到下一层了；如果是域名，则就把域名发给<code>DNS</code>客户端，然后由 <code>DNS</code> 客户端去连接你网络配置的 <code>DNS</code> 服务器，连接之后请求返回该域名对应的<code> IP</code>，获取到<code> IP</code> 之后再交给操作系统，然后继续完成之后的网络请求操作</p>\n<h5 id=\"如果本机配置的-DNS-服务器没有找到该域名对应的-IP-怎么办呢\"><a href=\"#如果本机配置的-DNS-服务器没有找到该域名对应的-IP-怎么办呢\" class=\"headerlink\" title=\"如果本机配置的 DNS 服务器没有找到该域名对应的 IP 怎么办呢\"></a>如果本机配置的 DNS 服务器没有找到该域名对应的 IP 怎么办呢</h5><p>每个联网的终端，都会配置一个 <code>DNS</code>服务器，即便是你没有主动的配置，则每次上网时也会由网关自动分配（这种由网关分配的机制就是 <code>DHCP</code>）</p>\n<p>当你在浏览器输入域名之后，OS就会到这个 <code>DNS</code> 服务器上去请求域名对应的<code>IP</code> 地址，如果请求到，则继续完成之前的请求；如果没有请求到，则就会进行分级查询了</p>\n<h5 id=\"域名的层级\"><a href=\"#域名的层级\" class=\"headerlink\" title=\"域名的层级\"></a>域名的层级</h5><p>在了解域名的分级查询之前，先看一下域名的层级，因为就是通过域名的层级进行分级查询的；</p>\n<p>下面是百度的域名</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">www.baidu.com.</span><br></pre></td></tr></table></figure>\n\n<p>通过域名解析工具，可以看到其实百度官网域名的后面会带一个<code>.</code>,这是因为所有的域名的尾部都会有一个根域名，完整的百度的域名应该是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">www.baidu.com.root</span><br></pre></td></tr></table></figure>\n\n<p>因为根域名<code>root</code>对所有的域名都一样的，所以平时都会省略点，就变成了<code>https://www.baidu.com.</code></p>\n<p>根域名的下一级域名叫做”顶级域名”（top-level domain，缩写 TLD），比如像<code>.com,.net</code>这些；</p>\n<p>再下一级的域名叫做二级域名（second-level domain，缩写 SLD），如：<code>https://www.baidu.com.</code>中的<code>.baidu</code>，这一级的域名是用户可以注册到的；</p>\n<p>再下一级的域名就是三级域名也是主机名，如：<code>www</code>，这是用户在自己的域里为服务器配置的名称，是用户可以任意分配的</p>\n<h5 id=\"分级查询\"><a href=\"#分级查询\" class=\"headerlink\" title=\"分级查询\"></a>分级查询</h5><p>所谓的分级查询就是当你在你配置的 DNS 服务器中找不到域名对应的 IP 之后，由当前的 DNS 服务器向根域名服务器发起的请求</p>\n<p>首先说明一点，每一级域名都有自己的 <code>NS（Name Server）</code> 记录（记录域名服务器的记录，就是指定那些域名该有哪个 DNS 服务器来解析）</p>\n<p>分级查询是从根域名开始，依次查找每一级域名的 NS 记录，找到查到最终的 IP 地址为止，具体查找过程如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 从 根域名服务器 找到顶级域名服务器的 NS 记录和 IP 地址</span><br><span class=\"line\">2. 从 顶级域名服务器 找到二级域名服务器的 NS 记录和 IP 地址</span><br><span class=\"line\">3. 从 二级域名服务器 找到 三级域名（主机名）的 IP 地址</span><br></pre></td></tr></table></figure>\n\n<p>那在分级查询到第一步中是如何知道根域名服务器的地址的呢</p>\n<p>这是因为根域名服务器的 NS 记录和 IP 地址一般不会变，所以通常是内置在 DNS 服务器当中的</p>\n<h4 id=\"DNS-缓存\"><a href=\"#DNS-缓存\" class=\"headerlink\" title=\"DNS 缓存\"></a>DNS 缓存</h4><p>如果每次都需要这么解析一遍那么访问一个网站就会变的很慢了，同时也会对根域名服务器造成压力</p>\n<p>因此通常就会对 DNS 解析的记录进行缓存，通常有两种缓存的方式：</p>\n<h6 id=\"浏览器缓存\"><a href=\"#浏览器缓存\" class=\"headerlink\" title=\"浏览器缓存\"></a>浏览器缓存</h6><p>浏览器缓存就是每次会对访问过的域名对应的 IP 缓存起来，当然这个缓存的时间也是根据不同的浏览器的厂商而定的；谷歌的一般是缓存一分钟，也可以在谷歌浏览器中输入：<code>chrome://net-internals/#dns</code>来清除缓存</p>\n<p>OS缓存</p>\n<p>另外一种就是操作系统对于 DNS 的缓存，每次 DNS Client 请求得到的解析记录都会有一个 TTL 值，这个就是 DNS 服务器提供的 DNS 解析结果的最长存活时间，OS 缓存的 DNS 就会参考这个时间，但是不会完全的等于这个时间；通过命令<code>ipconfig/displaydns</code>就可以查看到本机的 DNS 缓存；也可以使用命令<code>ipconfig/flushdns</code>来清除这些缓存</p>\n<h5 id=\"DNS-劫持\"><a href=\"#DNS-劫持\" class=\"headerlink\" title=\"DNS 劫持\"></a>DNS 劫持</h5><p>上面介绍了 DNS 域名解析的原理，现在又有了一个新的问题：什么是 DNS 劫持？</p>\n<p>正常情况下我们在浏览器输入请求后，OS 都会先到本机的 <code>hosts</code>文件查看是否有域名对应的 IP ，如果有则直接通过这个 IP 进行访问就可以了，如果没有，则就会到网络配置的 DNS 服务器上去获取当前域名对应的 IP 地址</p>\n<p>但是，如果现在有一个木马程序，入侵你的电脑之后更改了你的 <code>hosts</code>文件，将你访问的百度的域名对应到一个广告网站或者是其他的恶意网站，此时你再访问<code>www.baidu.com</code>的时候出现的就不会是百度的首页了，而是修改之后的恶意网站了，这就是本地 DNS 劫持</p>\n<p>本地 DNS 劫持就是因为病毒的入侵，所以你要安装杀毒软件，经常扫描；当然还需要开启防火墙，这样就可以防止病毒的入侵了</p>\n<p>除了本地的 DNS 劫持外，还有就是路由器的 DNS 劫持，现在市场上的路由器的质量层级不齐，并且很多的用户买了路由器之后使用的还是默认的密码，所以很容易遭到攻击；</p>\n<p>攻击获得管理权限之后，篡改路由器上设置的 DNS 服务器的地址，使其指向恶意的 DNS 服务器，这样当你发送请求的时候就会给你返回恶意网站的 IP地址；所以为了避免这种情况需要加强对路由器账号密码的管理，防止被恶意用户获取到路由器权限</p>\n<p>第三种劫持就是攻击权威的 DNS 服务器，导致 DNS 服务器停止服务，还可以使用一些手段感染 DNS 缓存，给用户返回恶意的 IP 地址</p>\n","site":{"data":{"styles":"body {\n  background: url(\"images/blogNew.jpg\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n"}},"excerpt":"<p>因为网络中数据的传输是通过 <code>TCP/IP</code>协议来完成的，在该协议中传输需要知道对端的 <code>IP</code>地址，然后通过 <code>IP</code>地址完成数据的传输。</p>\n<p>那当用户在浏览器中输入域名时，这个域名是如何被转换成 <code>IP</code>地址来完成数据传输的呢？</p>","more":"<p>这就是通过域名解析来完成的，域名解析这个词有点抽象，但是换个词可能就比较好理解了，比如：<code>IP</code>登记，域名指向等</p>\n<p>就 <code>IP</code> 登记而言，这个词就表明存在这么一个登记处，如果你想你的网站被别人能够访问到，就需要到这个登记处进行登记，在你登记的时候域名就相当于你的名字，<code>IP</code>就相当于你的住址；这样其他用户就可以通过域名来访问你的网站了，不再需要记住那些难记的 <code>IP</code>地址了</p>\n<p>上面所说的<code> IP</code> 登记处就是<code> DNS</code> 服务器了，每次当你在浏览器输入一个域名时，都会向<code> DNS</code> 请求这个域名对应的<code>IP</code>地址，找到之后再通过<code> IP</code> 完成具体的访问操作</p>\n<h5 id=\"是谁帮你完成域名解析的呢\"><a href=\"#是谁帮你完成域名解析的呢\" class=\"headerlink\" title=\"是谁帮你完成域名解析的呢\"></a>是谁帮你完成域名解析的呢</h5><p>因为浏览器本身不具备将消息发送到网络中的功能，所以这一步就是委托操作系统来完成的</p>\n<p>操作系统在接收到请求之后，如果是看到是<code> IP</code> 则直接发送到下一层了；如果是域名，则就把域名发给<code>DNS</code>客户端，然后由 <code>DNS</code> 客户端去连接你网络配置的 <code>DNS</code> 服务器，连接之后请求返回该域名对应的<code> IP</code>，获取到<code> IP</code> 之后再交给操作系统，然后继续完成之后的网络请求操作</p>\n<h5 id=\"如果本机配置的-DNS-服务器没有找到该域名对应的-IP-怎么办呢\"><a href=\"#如果本机配置的-DNS-服务器没有找到该域名对应的-IP-怎么办呢\" class=\"headerlink\" title=\"如果本机配置的 DNS 服务器没有找到该域名对应的 IP 怎么办呢\"></a>如果本机配置的 DNS 服务器没有找到该域名对应的 IP 怎么办呢</h5><p>每个联网的终端，都会配置一个 <code>DNS</code>服务器，即便是你没有主动的配置，则每次上网时也会由网关自动分配（这种由网关分配的机制就是 <code>DHCP</code>）</p>\n<p>当你在浏览器输入域名之后，OS就会到这个 <code>DNS</code> 服务器上去请求域名对应的<code>IP</code> 地址，如果请求到，则继续完成之前的请求；如果没有请求到，则就会进行分级查询了</p>\n<h5 id=\"域名的层级\"><a href=\"#域名的层级\" class=\"headerlink\" title=\"域名的层级\"></a>域名的层级</h5><p>在了解域名的分级查询之前，先看一下域名的层级，因为就是通过域名的层级进行分级查询的；</p>\n<p>下面是百度的域名</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">www.baidu.com.</span><br></pre></td></tr></table></figure>\n\n<p>通过域名解析工具，可以看到其实百度官网域名的后面会带一个<code>.</code>,这是因为所有的域名的尾部都会有一个根域名，完整的百度的域名应该是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">www.baidu.com.root</span><br></pre></td></tr></table></figure>\n\n<p>因为根域名<code>root</code>对所有的域名都一样的，所以平时都会省略点，就变成了<code>https://www.baidu.com.</code></p>\n<p>根域名的下一级域名叫做”顶级域名”（top-level domain，缩写 TLD），比如像<code>.com,.net</code>这些；</p>\n<p>再下一级的域名叫做二级域名（second-level domain，缩写 SLD），如：<code>https://www.baidu.com.</code>中的<code>.baidu</code>，这一级的域名是用户可以注册到的；</p>\n<p>再下一级的域名就是三级域名也是主机名，如：<code>www</code>，这是用户在自己的域里为服务器配置的名称，是用户可以任意分配的</p>\n<h5 id=\"分级查询\"><a href=\"#分级查询\" class=\"headerlink\" title=\"分级查询\"></a>分级查询</h5><p>所谓的分级查询就是当你在你配置的 DNS 服务器中找不到域名对应的 IP 之后，由当前的 DNS 服务器向根域名服务器发起的请求</p>\n<p>首先说明一点，每一级域名都有自己的 <code>NS（Name Server）</code> 记录（记录域名服务器的记录，就是指定那些域名该有哪个 DNS 服务器来解析）</p>\n<p>分级查询是从根域名开始，依次查找每一级域名的 NS 记录，找到查到最终的 IP 地址为止，具体查找过程如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 从 根域名服务器 找到顶级域名服务器的 NS 记录和 IP 地址</span><br><span class=\"line\">2. 从 顶级域名服务器 找到二级域名服务器的 NS 记录和 IP 地址</span><br><span class=\"line\">3. 从 二级域名服务器 找到 三级域名（主机名）的 IP 地址</span><br></pre></td></tr></table></figure>\n\n<p>那在分级查询到第一步中是如何知道根域名服务器的地址的呢</p>\n<p>这是因为根域名服务器的 NS 记录和 IP 地址一般不会变，所以通常是内置在 DNS 服务器当中的</p>\n<h4 id=\"DNS-缓存\"><a href=\"#DNS-缓存\" class=\"headerlink\" title=\"DNS 缓存\"></a>DNS 缓存</h4><p>如果每次都需要这么解析一遍那么访问一个网站就会变的很慢了，同时也会对根域名服务器造成压力</p>\n<p>因此通常就会对 DNS 解析的记录进行缓存，通常有两种缓存的方式：</p>\n<h6 id=\"浏览器缓存\"><a href=\"#浏览器缓存\" class=\"headerlink\" title=\"浏览器缓存\"></a>浏览器缓存</h6><p>浏览器缓存就是每次会对访问过的域名对应的 IP 缓存起来，当然这个缓存的时间也是根据不同的浏览器的厂商而定的；谷歌的一般是缓存一分钟，也可以在谷歌浏览器中输入：<code>chrome://net-internals/#dns</code>来清除缓存</p>\n<p>OS缓存</p>\n<p>另外一种就是操作系统对于 DNS 的缓存，每次 DNS Client 请求得到的解析记录都会有一个 TTL 值，这个就是 DNS 服务器提供的 DNS 解析结果的最长存活时间，OS 缓存的 DNS 就会参考这个时间，但是不会完全的等于这个时间；通过命令<code>ipconfig/displaydns</code>就可以查看到本机的 DNS 缓存；也可以使用命令<code>ipconfig/flushdns</code>来清除这些缓存</p>\n<h5 id=\"DNS-劫持\"><a href=\"#DNS-劫持\" class=\"headerlink\" title=\"DNS 劫持\"></a>DNS 劫持</h5><p>上面介绍了 DNS 域名解析的原理，现在又有了一个新的问题：什么是 DNS 劫持？</p>\n<p>正常情况下我们在浏览器输入请求后，OS 都会先到本机的 <code>hosts</code>文件查看是否有域名对应的 IP ，如果有则直接通过这个 IP 进行访问就可以了，如果没有，则就会到网络配置的 DNS 服务器上去获取当前域名对应的 IP 地址</p>\n<p>但是，如果现在有一个木马程序，入侵你的电脑之后更改了你的 <code>hosts</code>文件，将你访问的百度的域名对应到一个广告网站或者是其他的恶意网站，此时你再访问<code>www.baidu.com</code>的时候出现的就不会是百度的首页了，而是修改之后的恶意网站了，这就是本地 DNS 劫持</p>\n<p>本地 DNS 劫持就是因为病毒的入侵，所以你要安装杀毒软件，经常扫描；当然还需要开启防火墙，这样就可以防止病毒的入侵了</p>\n<p>除了本地的 DNS 劫持外，还有就是路由器的 DNS 劫持，现在市场上的路由器的质量层级不齐，并且很多的用户买了路由器之后使用的还是默认的密码，所以很容易遭到攻击；</p>\n<p>攻击获得管理权限之后，篡改路由器上设置的 DNS 服务器的地址，使其指向恶意的 DNS 服务器，这样当你发送请求的时候就会给你返回恶意网站的 IP地址；所以为了避免这种情况需要加强对路由器账号密码的管理，防止被恶意用户获取到路由器权限</p>\n<p>第三种劫持就是攻击权威的 DNS 服务器，导致 DNS 服务器停止服务，还可以使用一些手段感染 DNS 缓存，给用户返回恶意的 IP 地址</p>"},{"title":"搭建个人博客(3) - 更换博客主题","date":"2022-03-17T10:33:50.000Z","_content":"\n现在已经通过 `Hexo`搭建好了个人博客，并且发布到了`Github`上，可以通过`https://<username>.github.io`在公网中访问到了，解析来就是对博客进行一些优化。\n\n<!-- more -->\n\n#### 更换博客主题\n\n`Hexo`默认的博客主题就是`Landscape`,如下图所示：\n\n![01](.\\更换博客主题\\01.png)\n\n下面是`Hexo`排名前十的主题，你可以任意挑选一个进行替换\n\n```\nhttps://hexo.voxel.site/\n```\n\n##### 替换主题的步骤\n\n1. 首先到这个主题网站，点击进入到一个你选择的主题网站的`Github`中，当前选的是`next`主题，如下所示\n\n   ![02](.\\更换博客主题\\02.png)\n\n2. 下载主题\n\n   进入到博客的根目录下面，打开`git bash`界面，然后输入下面的命令\n\n   ```\n   git clone https://github.com/theme-next/hexo-theme-next themes/next\n   ```\n\n3. 更换主题\n\n   现在已经将`next`主题下载到了本地，进入到根目录下的`themes`目录当中，就可以看到刚才下载的`next`主题；现在返回到上一层目录，然后打开`_config.yml`配置文件，在文件中找到`theme`配置项，更换为`next`\n\n   ![03](.\\更换博客主题\\03.png)\n\n4. 配置主题\n\n   `next`有四种风格的主题，分别是：Muse，Mist，Pisces，Gemini；对应的样式就是如下的四种：\n\n   ![04](.\\更换博客主题\\04.png)\n\n   现在进入到`Blog/themes/next`目录下面，打开该目录下的`_config.yml`配置文件，然后找到配置项`scheme`,然后选择一个填入：\n\n   ![05](.\\更换博客主题\\05.png)\n\n   接下来就是保存推出\n\n5. 部署新主题\n\n   完成上面的操作后，执行如下的命令，将更改部署到`Github`上\n\n   ```\n   hexo clean\n   hexo g\n   hexo d\n   ```\n\n   此时你在重新在浏览器输入`https://<username>.github.io`就可以看到新的主题已经更换成功了","source":"_posts/更换博客主题.md","raw":"---\ntitle: 搭建个人博客(3) - 更换博客主题\ndate: 2022-03-17 18:33:50\ntags:\n- hexo\n- 个人博客搭建\ncategory:\n- 博客搭建\n---\n\n现在已经通过 `Hexo`搭建好了个人博客，并且发布到了`Github`上，可以通过`https://<username>.github.io`在公网中访问到了，解析来就是对博客进行一些优化。\n\n<!-- more -->\n\n#### 更换博客主题\n\n`Hexo`默认的博客主题就是`Landscape`,如下图所示：\n\n![01](.\\更换博客主题\\01.png)\n\n下面是`Hexo`排名前十的主题，你可以任意挑选一个进行替换\n\n```\nhttps://hexo.voxel.site/\n```\n\n##### 替换主题的步骤\n\n1. 首先到这个主题网站，点击进入到一个你选择的主题网站的`Github`中，当前选的是`next`主题，如下所示\n\n   ![02](.\\更换博客主题\\02.png)\n\n2. 下载主题\n\n   进入到博客的根目录下面，打开`git bash`界面，然后输入下面的命令\n\n   ```\n   git clone https://github.com/theme-next/hexo-theme-next themes/next\n   ```\n\n3. 更换主题\n\n   现在已经将`next`主题下载到了本地，进入到根目录下的`themes`目录当中，就可以看到刚才下载的`next`主题；现在返回到上一层目录，然后打开`_config.yml`配置文件，在文件中找到`theme`配置项，更换为`next`\n\n   ![03](.\\更换博客主题\\03.png)\n\n4. 配置主题\n\n   `next`有四种风格的主题，分别是：Muse，Mist，Pisces，Gemini；对应的样式就是如下的四种：\n\n   ![04](.\\更换博客主题\\04.png)\n\n   现在进入到`Blog/themes/next`目录下面，打开该目录下的`_config.yml`配置文件，然后找到配置项`scheme`,然后选择一个填入：\n\n   ![05](.\\更换博客主题\\05.png)\n\n   接下来就是保存推出\n\n5. 部署新主题\n\n   完成上面的操作后，执行如下的命令，将更改部署到`Github`上\n\n   ```\n   hexo clean\n   hexo g\n   hexo d\n   ```\n\n   此时你在重新在浏览器输入`https://<username>.github.io`就可以看到新的主题已经更换成功了","slug":"更换博客主题","published":1,"updated":"2022-03-30T08:37:20.706Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1n502rg0003z8tselumdy4x","content":"<p>现在已经通过 <code>Hexo</code>搭建好了个人博客，并且发布到了<code>Github</code>上，可以通过<code>https://&lt;username&gt;.github.io</code>在公网中访问到了，解析来就是对博客进行一些优化。</p>\n<span id=\"more\"></span>\n\n<h4 id=\"更换博客主题\"><a href=\"#更换博客主题\" class=\"headerlink\" title=\"更换博客主题\"></a>更换博客主题</h4><p><code>Hexo</code>默认的博客主题就是<code>Landscape</code>,如下图所示：</p>\n<p><img src=\"/.%5C%E6%9B%B4%E6%8D%A2%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%5C01.png\" alt=\"01\"></p>\n<p>下面是<code>Hexo</code>排名前十的主题，你可以任意挑选一个进行替换</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://hexo.voxel.site/</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"替换主题的步骤\"><a href=\"#替换主题的步骤\" class=\"headerlink\" title=\"替换主题的步骤\"></a>替换主题的步骤</h5><ol>\n<li><p>首先到这个主题网站，点击进入到一个你选择的主题网站的<code>Github</code>中，当前选的是<code>next</code>主题，如下所示</p>\n<p><img src=\"/.%5C%E6%9B%B4%E6%8D%A2%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%5C02.png\" alt=\"02\"></p>\n</li>\n<li><p>下载主题</p>\n<p>进入到博客的根目录下面，打开<code>git bash</code>界面，然后输入下面的命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>更换主题</p>\n<p>现在已经将<code>next</code>主题下载到了本地，进入到根目录下的<code>themes</code>目录当中，就可以看到刚才下载的<code>next</code>主题；现在返回到上一层目录，然后打开<code>_config.yml</code>配置文件，在文件中找到<code>theme</code>配置项，更换为<code>next</code></p>\n<p><img src=\"/.%5C%E6%9B%B4%E6%8D%A2%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%5C03.png\" alt=\"03\"></p>\n</li>\n<li><p>配置主题</p>\n<p><code>next</code>有四种风格的主题，分别是：Muse，Mist，Pisces，Gemini；对应的样式就是如下的四种：</p>\n<p><img src=\"/.%5C%E6%9B%B4%E6%8D%A2%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%5C04.png\" alt=\"04\"></p>\n<p>现在进入到<code>Blog/themes/next</code>目录下面，打开该目录下的<code>_config.yml</code>配置文件，然后找到配置项<code>scheme</code>,然后选择一个填入：</p>\n<p><img src=\"/.%5C%E6%9B%B4%E6%8D%A2%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%5C05.png\" alt=\"05\"></p>\n<p>接下来就是保存推出</p>\n</li>\n<li><p>部署新主题</p>\n<p>完成上面的操作后，执行如下的命令，将更改部署到<code>Github</code>上</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n\n<p>此时你在重新在浏览器输入<code>https://&lt;username&gt;.github.io</code>就可以看到新的主题已经更换成功了</p>\n</li>\n</ol>\n","site":{"data":{"styles":"body {\n  background: url(\"images/blogNew.jpg\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n"}},"excerpt":"<p>现在已经通过 <code>Hexo</code>搭建好了个人博客，并且发布到了<code>Github</code>上，可以通过<code>https://&lt;username&gt;.github.io</code>在公网中访问到了，解析来就是对博客进行一些优化。</p>","more":"<h4 id=\"更换博客主题\"><a href=\"#更换博客主题\" class=\"headerlink\" title=\"更换博客主题\"></a>更换博客主题</h4><p><code>Hexo</code>默认的博客主题就是<code>Landscape</code>,如下图所示：</p>\n<p><img src=\"/.%5C%E6%9B%B4%E6%8D%A2%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%5C01.png\" alt=\"01\"></p>\n<p>下面是<code>Hexo</code>排名前十的主题，你可以任意挑选一个进行替换</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://hexo.voxel.site/</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"替换主题的步骤\"><a href=\"#替换主题的步骤\" class=\"headerlink\" title=\"替换主题的步骤\"></a>替换主题的步骤</h5><ol>\n<li><p>首先到这个主题网站，点击进入到一个你选择的主题网站的<code>Github</code>中，当前选的是<code>next</code>主题，如下所示</p>\n<p><img src=\"/.%5C%E6%9B%B4%E6%8D%A2%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%5C02.png\" alt=\"02\"></p>\n</li>\n<li><p>下载主题</p>\n<p>进入到博客的根目录下面，打开<code>git bash</code>界面，然后输入下面的命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>更换主题</p>\n<p>现在已经将<code>next</code>主题下载到了本地，进入到根目录下的<code>themes</code>目录当中，就可以看到刚才下载的<code>next</code>主题；现在返回到上一层目录，然后打开<code>_config.yml</code>配置文件，在文件中找到<code>theme</code>配置项，更换为<code>next</code></p>\n<p><img src=\"/.%5C%E6%9B%B4%E6%8D%A2%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%5C03.png\" alt=\"03\"></p>\n</li>\n<li><p>配置主题</p>\n<p><code>next</code>有四种风格的主题，分别是：Muse，Mist，Pisces，Gemini；对应的样式就是如下的四种：</p>\n<p><img src=\"/.%5C%E6%9B%B4%E6%8D%A2%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%5C04.png\" alt=\"04\"></p>\n<p>现在进入到<code>Blog/themes/next</code>目录下面，打开该目录下的<code>_config.yml</code>配置文件，然后找到配置项<code>scheme</code>,然后选择一个填入：</p>\n<p><img src=\"/.%5C%E6%9B%B4%E6%8D%A2%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%5C05.png\" alt=\"05\"></p>\n<p>接下来就是保存推出</p>\n</li>\n<li><p>部署新主题</p>\n<p>完成上面的操作后，执行如下的命令，将更改部署到<code>Github</code>上</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n\n<p>此时你在重新在浏览器输入<code>https://&lt;username&gt;.github.io</code>就可以看到新的主题已经更换成功了</p>\n</li>\n</ol>"},{"title":"搭建个人博客（4）- 域名解析","date":"2022-03-17T10:35:53.000Z","_content":"\n在前面的过程中，已经成功的部署了博客，并且更换了博客的主题；接下来，就是更换博客的域名；之前部署完成之后域名是这样的`https://<username>.github.io`，这个域名收到`Github`的限制，所以更换一个自定义的域名\n\n<!-- more -->\n\n##### 域名解析\n\n##### 1. 购买域名\n\n如果已经有闲置的域名就不需要在购买了；找到阿里云或者腾讯云的官网（在这使用的是阿里云的官网），[登入阿里云](https://wanwang.aliyun.com/)，找到域名注册\n\n![06](.\\更换博客主题\\06.png)\n\n进入之后，输入一个域名，查看是否已经被注册了；（.com的域名有点贵，所以选了一个.com.cn的域名），首年是29，续费是每年39；当然也可以买好几年的\n\n![07](.\\更换博客主题\\07.png)\n\n然后加入域名清单，到域名清单进行购买；跳转之后到了如下的下面，选择所有者类型为个人，然后点击创建信息模板，如果之前有则就不用再创建了；现在购买域名都需要实名认证，不过这个认证时间很快，差不多半小时就好了；然后点击购买就好了\n\n![08](.\\更换博客主题\\08.png)\n\n##### 2. 域名解析\n\n买完域名之后，进入阿里云控制台；然后在你的域名下面添加两条记录\n\n![13](.\\更换博客主题\\13.png)\n\n这有两种记录类型：\n\n- A：表示解析到一个 IP 地址，这个 IP 地址可以通过`ping `<username>.github.io`获取到\n- CNAME：表示将购买的这个域名解析到部署博客的那个`<username>.github.io`这个域名，这是为了防止`<username>.github.io` `的IP`变动\n\n3. ##### 添加 CNAME 文件\n\n   打开本地博客的根目录，在`source`目录下面，添加`CNAME`文件（不带任何后缀），打开该文件将刚才创建的购买的域名写入\n\n   ![10](.\\更换博客主题\\10.png)\n\n4. 执行命令将博客部署到`github`\n\n   ```\n   hexo clean\n   hexo g\n   hexo d\n   ```\n\n5. 在 Github 配置CNAME\n\n   打开`github`仓库`<username>.github.io`，可以看到在根目录下有一个`CNAME`文件；\n\n   ![11](.\\更换博客主题\\11.png)\n\n   接下来，在当前项目的`Setting`中打开`Pages`页面，然后看域名是否保存，如果没有保存，点击保存即可\n\n   ![12](.\\更换博客主题\\12.png)\n\n这样就可以通过自定义的域名来访问部署的博客了","source":"_posts/域名解析.md","raw":"---\ntitle: 搭建个人博客（4）- 域名解析\ndate: 2022-03-17 18:35:53\ntags:\n- hexo\n- 个人博客搭建\ncategory:\n- 博客搭建\n---\n\n在前面的过程中，已经成功的部署了博客，并且更换了博客的主题；接下来，就是更换博客的域名；之前部署完成之后域名是这样的`https://<username>.github.io`，这个域名收到`Github`的限制，所以更换一个自定义的域名\n\n<!-- more -->\n\n##### 域名解析\n\n##### 1. 购买域名\n\n如果已经有闲置的域名就不需要在购买了；找到阿里云或者腾讯云的官网（在这使用的是阿里云的官网），[登入阿里云](https://wanwang.aliyun.com/)，找到域名注册\n\n![06](.\\更换博客主题\\06.png)\n\n进入之后，输入一个域名，查看是否已经被注册了；（.com的域名有点贵，所以选了一个.com.cn的域名），首年是29，续费是每年39；当然也可以买好几年的\n\n![07](.\\更换博客主题\\07.png)\n\n然后加入域名清单，到域名清单进行购买；跳转之后到了如下的下面，选择所有者类型为个人，然后点击创建信息模板，如果之前有则就不用再创建了；现在购买域名都需要实名认证，不过这个认证时间很快，差不多半小时就好了；然后点击购买就好了\n\n![08](.\\更换博客主题\\08.png)\n\n##### 2. 域名解析\n\n买完域名之后，进入阿里云控制台；然后在你的域名下面添加两条记录\n\n![13](.\\更换博客主题\\13.png)\n\n这有两种记录类型：\n\n- A：表示解析到一个 IP 地址，这个 IP 地址可以通过`ping `<username>.github.io`获取到\n- CNAME：表示将购买的这个域名解析到部署博客的那个`<username>.github.io`这个域名，这是为了防止`<username>.github.io` `的IP`变动\n\n3. ##### 添加 CNAME 文件\n\n   打开本地博客的根目录，在`source`目录下面，添加`CNAME`文件（不带任何后缀），打开该文件将刚才创建的购买的域名写入\n\n   ![10](.\\更换博客主题\\10.png)\n\n4. 执行命令将博客部署到`github`\n\n   ```\n   hexo clean\n   hexo g\n   hexo d\n   ```\n\n5. 在 Github 配置CNAME\n\n   打开`github`仓库`<username>.github.io`，可以看到在根目录下有一个`CNAME`文件；\n\n   ![11](.\\更换博客主题\\11.png)\n\n   接下来，在当前项目的`Setting`中打开`Pages`页面，然后看域名是否保存，如果没有保存，点击保存即可\n\n   ![12](.\\更换博客主题\\12.png)\n\n这样就可以通过自定义的域名来访问部署的博客了","slug":"域名解析","published":1,"updated":"2022-03-30T08:37:20.703Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1n502rj0007z8ts3nj829ju","content":"<p>在前面的过程中，已经成功的部署了博客，并且更换了博客的主题；接下来，就是更换博客的域名；之前部署完成之后域名是这样的<code>https://&lt;username&gt;.github.io</code>，这个域名收到<code>Github</code>的限制，所以更换一个自定义的域名</p>\n<span id=\"more\"></span>\n\n<h5 id=\"域名解析\"><a href=\"#域名解析\" class=\"headerlink\" title=\"域名解析\"></a>域名解析</h5><h5 id=\"1-购买域名\"><a href=\"#1-购买域名\" class=\"headerlink\" title=\"1. 购买域名\"></a>1. 购买域名</h5><p>如果已经有闲置的域名就不需要在购买了；找到阿里云或者腾讯云的官网（在这使用的是阿里云的官网），<a href=\"https://wanwang.aliyun.com/\">登入阿里云</a>，找到域名注册</p>\n<p><img src=\"/.%5C%E6%9B%B4%E6%8D%A2%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%5C06.png\" alt=\"06\"></p>\n<p>进入之后，输入一个域名，查看是否已经被注册了；（.com的域名有点贵，所以选了一个.com.cn的域名），首年是29，续费是每年39；当然也可以买好几年的</p>\n<p><img src=\"/.%5C%E6%9B%B4%E6%8D%A2%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%5C07.png\" alt=\"07\"></p>\n<p>然后加入域名清单，到域名清单进行购买；跳转之后到了如下的下面，选择所有者类型为个人，然后点击创建信息模板，如果之前有则就不用再创建了；现在购买域名都需要实名认证，不过这个认证时间很快，差不多半小时就好了；然后点击购买就好了</p>\n<p><img src=\"/.%5C%E6%9B%B4%E6%8D%A2%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%5C08.png\" alt=\"08\"></p>\n<h5 id=\"2-域名解析\"><a href=\"#2-域名解析\" class=\"headerlink\" title=\"2. 域名解析\"></a>2. 域名解析</h5><p>买完域名之后，进入阿里云控制台；然后在你的域名下面添加两条记录</p>\n<p><img src=\"/.%5C%E6%9B%B4%E6%8D%A2%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%5C13.png\" alt=\"13\"></p>\n<p>这有两种记录类型：</p>\n<ul>\n<li>A：表示解析到一个 IP 地址，这个 IP 地址可以通过<code>ping </code><username>.github.io&#96;获取到</li>\n<li>CNAME：表示将购买的这个域名解析到部署博客的那个<code>&lt;username&gt;.github.io</code>这个域名，这是为了防止<code>&lt;username&gt;.github.io</code> <code>的IP</code>变动</li>\n</ul>\n<ol start=\"3\">\n<li><h5 id=\"添加-CNAME-文件\"><a href=\"#添加-CNAME-文件\" class=\"headerlink\" title=\"添加 CNAME 文件\"></a>添加 CNAME 文件</h5><p>打开本地博客的根目录，在<code>source</code>目录下面，添加<code>CNAME</code>文件（不带任何后缀），打开该文件将刚才创建的购买的域名写入</p>\n<p><img src=\"/.%5C%E6%9B%B4%E6%8D%A2%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%5C10.png\" alt=\"10\"></p>\n</li>\n<li><p>执行命令将博客部署到<code>github</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 Github 配置CNAME</p>\n<p>打开<code>github</code>仓库<code>&lt;username&gt;.github.io</code>，可以看到在根目录下有一个<code>CNAME</code>文件；</p>\n<p><img src=\"/.%5C%E6%9B%B4%E6%8D%A2%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%5C11.png\" alt=\"11\"></p>\n<p>接下来，在当前项目的<code>Setting</code>中打开<code>Pages</code>页面，然后看域名是否保存，如果没有保存，点击保存即可</p>\n<p><img src=\"/.%5C%E6%9B%B4%E6%8D%A2%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%5C12.png\" alt=\"12\"></p>\n</li>\n</ol>\n<p>这样就可以通过自定义的域名来访问部署的博客了</p>\n","site":{"data":{"styles":"body {\n  background: url(\"images/blogNew.jpg\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n"}},"excerpt":"<p>在前面的过程中，已经成功的部署了博客，并且更换了博客的主题；接下来，就是更换博客的域名；之前部署完成之后域名是这样的<code>https://&lt;username&gt;.github.io</code>，这个域名收到<code>Github</code>的限制，所以更换一个自定义的域名</p>","more":"<h5 id=\"域名解析\"><a href=\"#域名解析\" class=\"headerlink\" title=\"域名解析\"></a>域名解析</h5><h5 id=\"1-购买域名\"><a href=\"#1-购买域名\" class=\"headerlink\" title=\"1. 购买域名\"></a>1. 购买域名</h5><p>如果已经有闲置的域名就不需要在购买了；找到阿里云或者腾讯云的官网（在这使用的是阿里云的官网），<a href=\"https://wanwang.aliyun.com/\">登入阿里云</a>，找到域名注册</p>\n<p><img src=\"/.%5C%E6%9B%B4%E6%8D%A2%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%5C06.png\" alt=\"06\"></p>\n<p>进入之后，输入一个域名，查看是否已经被注册了；（.com的域名有点贵，所以选了一个.com.cn的域名），首年是29，续费是每年39；当然也可以买好几年的</p>\n<p><img src=\"/.%5C%E6%9B%B4%E6%8D%A2%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%5C07.png\" alt=\"07\"></p>\n<p>然后加入域名清单，到域名清单进行购买；跳转之后到了如下的下面，选择所有者类型为个人，然后点击创建信息模板，如果之前有则就不用再创建了；现在购买域名都需要实名认证，不过这个认证时间很快，差不多半小时就好了；然后点击购买就好了</p>\n<p><img src=\"/.%5C%E6%9B%B4%E6%8D%A2%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%5C08.png\" alt=\"08\"></p>\n<h5 id=\"2-域名解析\"><a href=\"#2-域名解析\" class=\"headerlink\" title=\"2. 域名解析\"></a>2. 域名解析</h5><p>买完域名之后，进入阿里云控制台；然后在你的域名下面添加两条记录</p>\n<p><img src=\"/.%5C%E6%9B%B4%E6%8D%A2%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%5C13.png\" alt=\"13\"></p>\n<p>这有两种记录类型：</p>\n<ul>\n<li>A：表示解析到一个 IP 地址，这个 IP 地址可以通过<code>ping </code><username>.github.io&#96;获取到</li>\n<li>CNAME：表示将购买的这个域名解析到部署博客的那个<code>&lt;username&gt;.github.io</code>这个域名，这是为了防止<code>&lt;username&gt;.github.io</code> <code>的IP</code>变动</li>\n</ul>\n<ol start=\"3\">\n<li><h5 id=\"添加-CNAME-文件\"><a href=\"#添加-CNAME-文件\" class=\"headerlink\" title=\"添加 CNAME 文件\"></a>添加 CNAME 文件</h5><p>打开本地博客的根目录，在<code>source</code>目录下面，添加<code>CNAME</code>文件（不带任何后缀），打开该文件将刚才创建的购买的域名写入</p>\n<p><img src=\"/.%5C%E6%9B%B4%E6%8D%A2%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%5C10.png\" alt=\"10\"></p>\n</li>\n<li><p>执行命令将博客部署到<code>github</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 Github 配置CNAME</p>\n<p>打开<code>github</code>仓库<code>&lt;username&gt;.github.io</code>，可以看到在根目录下有一个<code>CNAME</code>文件；</p>\n<p><img src=\"/.%5C%E6%9B%B4%E6%8D%A2%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%5C11.png\" alt=\"11\"></p>\n<p>接下来，在当前项目的<code>Setting</code>中打开<code>Pages</code>页面，然后看域名是否保存，如果没有保存，点击保存即可</p>\n<p><img src=\"/.%5C%E6%9B%B4%E6%8D%A2%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%5C12.png\" alt=\"12\"></p>\n</li>\n</ol>\n<p>这样就可以通过自定义的域名来访问部署的博客了</p>"},{"title":"搭建个人博客（1）- 初始化博客","date":"2022-03-16T07:01:51.000Z","_content":"\n最近想着搭建一个个人博客，然后在网上找到了几种搭建个人博客的方式：\n\n##### 静态网站生成器\n\n这种就是在终端使用`hexo,hugo,Jekyll`等工具，生成一个博客系统，然后通过`Github pages`进行展示\n\n优点：可以自己选择博客主题，并且有很多插件实现评论、搜索、流量统计等功能\n\n缺点：没有后台管理系统，需要自己在本地写完之后，发布到`github pages`上；当然，如果集成`github Actions`之后，每次写完只需要推送到`github`就可以了\n\n<!-- more -->\n\n##### 内容管理系统\n\n如：Wordpress，Ghost等，这种更多是企业级的应用，也可以搭建个人博客\n\n这种博客是带有后台管理系统的，但是需要配置数据库、域名和服务器等，这些花费会比较大\n\n##### 第三方平台\n\n最简单就是使用第三方平台，如：掘金，简书等；并且会有站点的推广，当然也会受到平台的一些限制\n\n#### Hexo 搭建个人博客\n\n下面主要介绍通过`hexo`来搭建个人博客，同时添加`pure`作为该博客系统的主题，主题的样式可以看一下如下的`demo`\n\n[hexo-pure 主题 demo]()\n\n##### 搭建个人博客前提\n\n- 一个`Github`的账号，因为现在`Github`不再支持账密操作了，所以你还需要生成一个`Github Personal Token`，生成方式：\n\n  [Github不支持账密操作的解决方案]()\n\n- 本地安装 `Git`\n\n  - Windows：下载并安装 [git](https://git-scm.com/download/win).\n  - Mac：使用 [Homebrew](http://mxcl.github.com/homebrew/), [MacPorts](http://www.macports.org/) 或者下载 [安装程序](http://sourceforge.net/projects/git-osx-installer/)。\n  - Linux (Ubuntu, Debian)：`sudo apt-get install git-core`\n  - Linux (Fedora, Red Hat, CentOS)：`sudo yum install git-core`\n\n- 安装 Node.js\n\n  [node.js 详细安装步骤](https://blog.csdn.net/antma/article/details/86104068)\n\n##### 安装 Hexo\n\n完成上面的操作之后，右键打开`Git Bash，`输入如下命令安装`hexo`：\n\n```\nnpm install -g hexo-cli\n```\n\n##### 建站\n\n通过上面的命令安装好`hexo`之后，就可以使用`hexo`的命令建站了，使用命令\n\n```\nhexo init <folder>\ncd <folder>\nnpm install\n```\n\n执行完成之后，打开新建的目录，可以看到如下的目录列表：\n\n```\n.\n├── _config.yml  //站点配置文件\n├── package.json // npm 的依赖列表\n├── scaffolds    // 文章模板\n├── source      //这个下面就是具体的文章了\n|   ├── _drafts  //草稿箱\n|   └── _posts   // 发布的列表\n└── themes       // 当前博客支持的主题，默认只有一个 landscape\n```\n\n此时，已经生成了一个静态的博客系统，可以通过如下的命令来访问本地搭建的博客\n\n1. `hexo g`：生成静态文件\n2. `hexo d`：部署网站\n3. `hexo server`：在本地启动服务\n\n然后在浏览器中输入`http://localhost:4000/`就可以访问本地搭建的博客系统了\n","source":"_posts/使用hexo搭建个人blog.md","raw":"---\ntitle: 搭建个人博客（1）- 初始化博客\ndate: 2022-03-16 15:01:51\ntags:\n- hexo\n- 个人博客搭建\ncategory:\n- 博客搭建\n---\n\n最近想着搭建一个个人博客，然后在网上找到了几种搭建个人博客的方式：\n\n##### 静态网站生成器\n\n这种就是在终端使用`hexo,hugo,Jekyll`等工具，生成一个博客系统，然后通过`Github pages`进行展示\n\n优点：可以自己选择博客主题，并且有很多插件实现评论、搜索、流量统计等功能\n\n缺点：没有后台管理系统，需要自己在本地写完之后，发布到`github pages`上；当然，如果集成`github Actions`之后，每次写完只需要推送到`github`就可以了\n\n<!-- more -->\n\n##### 内容管理系统\n\n如：Wordpress，Ghost等，这种更多是企业级的应用，也可以搭建个人博客\n\n这种博客是带有后台管理系统的，但是需要配置数据库、域名和服务器等，这些花费会比较大\n\n##### 第三方平台\n\n最简单就是使用第三方平台，如：掘金，简书等；并且会有站点的推广，当然也会受到平台的一些限制\n\n#### Hexo 搭建个人博客\n\n下面主要介绍通过`hexo`来搭建个人博客，同时添加`pure`作为该博客系统的主题，主题的样式可以看一下如下的`demo`\n\n[hexo-pure 主题 demo]()\n\n##### 搭建个人博客前提\n\n- 一个`Github`的账号，因为现在`Github`不再支持账密操作了，所以你还需要生成一个`Github Personal Token`，生成方式：\n\n  [Github不支持账密操作的解决方案]()\n\n- 本地安装 `Git`\n\n  - Windows：下载并安装 [git](https://git-scm.com/download/win).\n  - Mac：使用 [Homebrew](http://mxcl.github.com/homebrew/), [MacPorts](http://www.macports.org/) 或者下载 [安装程序](http://sourceforge.net/projects/git-osx-installer/)。\n  - Linux (Ubuntu, Debian)：`sudo apt-get install git-core`\n  - Linux (Fedora, Red Hat, CentOS)：`sudo yum install git-core`\n\n- 安装 Node.js\n\n  [node.js 详细安装步骤](https://blog.csdn.net/antma/article/details/86104068)\n\n##### 安装 Hexo\n\n完成上面的操作之后，右键打开`Git Bash，`输入如下命令安装`hexo`：\n\n```\nnpm install -g hexo-cli\n```\n\n##### 建站\n\n通过上面的命令安装好`hexo`之后，就可以使用`hexo`的命令建站了，使用命令\n\n```\nhexo init <folder>\ncd <folder>\nnpm install\n```\n\n执行完成之后，打开新建的目录，可以看到如下的目录列表：\n\n```\n.\n├── _config.yml  //站点配置文件\n├── package.json // npm 的依赖列表\n├── scaffolds    // 文章模板\n├── source      //这个下面就是具体的文章了\n|   ├── _drafts  //草稿箱\n|   └── _posts   // 发布的列表\n└── themes       // 当前博客支持的主题，默认只有一个 landscape\n```\n\n此时，已经生成了一个静态的博客系统，可以通过如下的命令来访问本地搭建的博客\n\n1. `hexo g`：生成静态文件\n2. `hexo d`：部署网站\n3. `hexo server`：在本地启动服务\n\n然后在浏览器中输入`http://localhost:4000/`就可以访问本地搭建的博客系统了\n","slug":"使用hexo搭建个人blog","published":1,"updated":"2022-03-30T08:37:20.700Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1n502rl0009z8ts3msc295u","content":"<p>最近想着搭建一个个人博客，然后在网上找到了几种搭建个人博客的方式：</p>\n<h5 id=\"静态网站生成器\"><a href=\"#静态网站生成器\" class=\"headerlink\" title=\"静态网站生成器\"></a>静态网站生成器</h5><p>这种就是在终端使用<code>hexo,hugo,Jekyll</code>等工具，生成一个博客系统，然后通过<code>Github pages</code>进行展示</p>\n<p>优点：可以自己选择博客主题，并且有很多插件实现评论、搜索、流量统计等功能</p>\n<p>缺点：没有后台管理系统，需要自己在本地写完之后，发布到<code>github pages</code>上；当然，如果集成<code>github Actions</code>之后，每次写完只需要推送到<code>github</code>就可以了</p>\n<span id=\"more\"></span>\n\n<h5 id=\"内容管理系统\"><a href=\"#内容管理系统\" class=\"headerlink\" title=\"内容管理系统\"></a>内容管理系统</h5><p>如：Wordpress，Ghost等，这种更多是企业级的应用，也可以搭建个人博客</p>\n<p>这种博客是带有后台管理系统的，但是需要配置数据库、域名和服务器等，这些花费会比较大</p>\n<h5 id=\"第三方平台\"><a href=\"#第三方平台\" class=\"headerlink\" title=\"第三方平台\"></a>第三方平台</h5><p>最简单就是使用第三方平台，如：掘金，简书等；并且会有站点的推广，当然也会受到平台的一些限制</p>\n<h4 id=\"Hexo-搭建个人博客\"><a href=\"#Hexo-搭建个人博客\" class=\"headerlink\" title=\"Hexo 搭建个人博客\"></a>Hexo 搭建个人博客</h4><p>下面主要介绍通过<code>hexo</code>来搭建个人博客，同时添加<code>pure</code>作为该博客系统的主题，主题的样式可以看一下如下的<code>demo</code></p>\n<p><a href=\"\">hexo-pure 主题 demo</a></p>\n<h5 id=\"搭建个人博客前提\"><a href=\"#搭建个人博客前提\" class=\"headerlink\" title=\"搭建个人博客前提\"></a>搭建个人博客前提</h5><ul>\n<li><p>一个<code>Github</code>的账号，因为现在<code>Github</code>不再支持账密操作了，所以你还需要生成一个<code>Github Personal Token</code>，生成方式：</p>\n<p><a href=\"\">Github不支持账密操作的解决方案</a></p>\n</li>\n<li><p>本地安装 <code>Git</code></p>\n<ul>\n<li>Windows：下载并安装 <a href=\"https://git-scm.com/download/win\">git</a>.</li>\n<li>Mac：使用 <a href=\"http://mxcl.github.com/homebrew/\">Homebrew</a>, <a href=\"http://www.macports.org/\">MacPorts</a> 或者下载 <a href=\"http://sourceforge.net/projects/git-osx-installer/\">安装程序</a>。</li>\n<li>Linux (Ubuntu, Debian)：<code>sudo apt-get install git-core</code></li>\n<li>Linux (Fedora, Red Hat, CentOS)：<code>sudo yum install git-core</code></li>\n</ul>\n</li>\n<li><p>安装 Node.js</p>\n<p><a href=\"https://blog.csdn.net/antma/article/details/86104068\">node.js 详细安装步骤</a></p>\n</li>\n</ul>\n<h5 id=\"安装-Hexo\"><a href=\"#安装-Hexo\" class=\"headerlink\" title=\"安装 Hexo\"></a>安装 Hexo</h5><p>完成上面的操作之后，右键打开<code>Git Bash，</code>输入如下命令安装<code>hexo</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"建站\"><a href=\"#建站\" class=\"headerlink\" title=\"建站\"></a>建站</h5><p>通过上面的命令安装好<code>hexo</code>之后，就可以使用<code>hexo</code>的命令建站了，使用命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init &lt;folder&gt;</span><br><span class=\"line\">cd &lt;folder&gt;</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n\n<p>执行完成之后，打开新建的目录，可以看到如下的目录列表：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── _config.yml  //站点配置文件</span><br><span class=\"line\">├── package.json // npm 的依赖列表</span><br><span class=\"line\">├── scaffolds    // 文章模板</span><br><span class=\"line\">├── source      //这个下面就是具体的文章了</span><br><span class=\"line\">|   ├── _drafts  //草稿箱</span><br><span class=\"line\">|   └── _posts   // 发布的列表</span><br><span class=\"line\">└── themes       // 当前博客支持的主题，默认只有一个 landscape</span><br></pre></td></tr></table></figure>\n\n<p>此时，已经生成了一个静态的博客系统，可以通过如下的命令来访问本地搭建的博客</p>\n<ol>\n<li><code>hexo g</code>：生成静态文件</li>\n<li><code>hexo d</code>：部署网站</li>\n<li><code>hexo server</code>：在本地启动服务</li>\n</ol>\n<p>然后在浏览器中输入<code>http://localhost:4000/</code>就可以访问本地搭建的博客系统了</p>\n","site":{"data":{"styles":"body {\n  background: url(\"images/blogNew.jpg\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n"}},"excerpt":"<p>最近想着搭建一个个人博客，然后在网上找到了几种搭建个人博客的方式：</p>\n<h5 id=\"静态网站生成器\"><a href=\"#静态网站生成器\" class=\"headerlink\" title=\"静态网站生成器\"></a>静态网站生成器</h5><p>这种就是在终端使用<code>hexo,hugo,Jekyll</code>等工具，生成一个博客系统，然后通过<code>Github pages</code>进行展示</p>\n<p>优点：可以自己选择博客主题，并且有很多插件实现评论、搜索、流量统计等功能</p>\n<p>缺点：没有后台管理系统，需要自己在本地写完之后，发布到<code>github pages</code>上；当然，如果集成<code>github Actions</code>之后，每次写完只需要推送到<code>github</code>就可以了</p>","more":"<h5 id=\"内容管理系统\"><a href=\"#内容管理系统\" class=\"headerlink\" title=\"内容管理系统\"></a>内容管理系统</h5><p>如：Wordpress，Ghost等，这种更多是企业级的应用，也可以搭建个人博客</p>\n<p>这种博客是带有后台管理系统的，但是需要配置数据库、域名和服务器等，这些花费会比较大</p>\n<h5 id=\"第三方平台\"><a href=\"#第三方平台\" class=\"headerlink\" title=\"第三方平台\"></a>第三方平台</h5><p>最简单就是使用第三方平台，如：掘金，简书等；并且会有站点的推广，当然也会受到平台的一些限制</p>\n<h4 id=\"Hexo-搭建个人博客\"><a href=\"#Hexo-搭建个人博客\" class=\"headerlink\" title=\"Hexo 搭建个人博客\"></a>Hexo 搭建个人博客</h4><p>下面主要介绍通过<code>hexo</code>来搭建个人博客，同时添加<code>pure</code>作为该博客系统的主题，主题的样式可以看一下如下的<code>demo</code></p>\n<p><a href=\"\">hexo-pure 主题 demo</a></p>\n<h5 id=\"搭建个人博客前提\"><a href=\"#搭建个人博客前提\" class=\"headerlink\" title=\"搭建个人博客前提\"></a>搭建个人博客前提</h5><ul>\n<li><p>一个<code>Github</code>的账号，因为现在<code>Github</code>不再支持账密操作了，所以你还需要生成一个<code>Github Personal Token</code>，生成方式：</p>\n<p><a href=\"\">Github不支持账密操作的解决方案</a></p>\n</li>\n<li><p>本地安装 <code>Git</code></p>\n<ul>\n<li>Windows：下载并安装 <a href=\"https://git-scm.com/download/win\">git</a>.</li>\n<li>Mac：使用 <a href=\"http://mxcl.github.com/homebrew/\">Homebrew</a>, <a href=\"http://www.macports.org/\">MacPorts</a> 或者下载 <a href=\"http://sourceforge.net/projects/git-osx-installer/\">安装程序</a>。</li>\n<li>Linux (Ubuntu, Debian)：<code>sudo apt-get install git-core</code></li>\n<li>Linux (Fedora, Red Hat, CentOS)：<code>sudo yum install git-core</code></li>\n</ul>\n</li>\n<li><p>安装 Node.js</p>\n<p><a href=\"https://blog.csdn.net/antma/article/details/86104068\">node.js 详细安装步骤</a></p>\n</li>\n</ul>\n<h5 id=\"安装-Hexo\"><a href=\"#安装-Hexo\" class=\"headerlink\" title=\"安装 Hexo\"></a>安装 Hexo</h5><p>完成上面的操作之后，右键打开<code>Git Bash，</code>输入如下命令安装<code>hexo</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"建站\"><a href=\"#建站\" class=\"headerlink\" title=\"建站\"></a>建站</h5><p>通过上面的命令安装好<code>hexo</code>之后，就可以使用<code>hexo</code>的命令建站了，使用命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init &lt;folder&gt;</span><br><span class=\"line\">cd &lt;folder&gt;</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n\n<p>执行完成之后，打开新建的目录，可以看到如下的目录列表：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── _config.yml  //站点配置文件</span><br><span class=\"line\">├── package.json // npm 的依赖列表</span><br><span class=\"line\">├── scaffolds    // 文章模板</span><br><span class=\"line\">├── source      //这个下面就是具体的文章了</span><br><span class=\"line\">|   ├── _drafts  //草稿箱</span><br><span class=\"line\">|   └── _posts   // 发布的列表</span><br><span class=\"line\">└── themes       // 当前博客支持的主题，默认只有一个 landscape</span><br></pre></td></tr></table></figure>\n\n<p>此时，已经生成了一个静态的博客系统，可以通过如下的命令来访问本地搭建的博客</p>\n<ol>\n<li><code>hexo g</code>：生成静态文件</li>\n<li><code>hexo d</code>：部署网站</li>\n<li><code>hexo server</code>：在本地启动服务</li>\n</ol>\n<p>然后在浏览器中输入<code>http://localhost:4000/</code>就可以访问本地搭建的博客系统了</p>"},{"title":"设计模式 — 原型模式","date":"2022-03-31T10:35:53.000Z","_content":"\n原型j就是指原来的类型或模型，特指文学艺术作品中塑造人物形象所依赖的现实生活中的人\n\n<!-- more -->\n\n#### 原型设计模式\n\n原型模式是一种创建型设计模式，它能够帮助你克隆指定的对象，并且无需和对象所属的类耦合，下面通过具体的问题来说明该设计模式的应用场景\n\n#### 问题\n\n假如现在有一个对象`User`，要复制和这个`User`完全一样的对象要怎么做呢？首先，需要新建一个同类对象，然后将`User`对象的所有成员变量复制到新对象就好了，但现在有两个问题：\n\n1. 如果有组合类型，那就需要遍历组合类型的成员变量来完成复制；如果变量是私有变量，那么只能再调用获取私有变量的方法才能够实现私有变量的复制；\n\n   按照这种方式进行复制的话，这段代码就和对象所属的类产生的紧密的耦合；原对象所属的类发生的任何变化，都要在此处进行相应的更改；如果这种复制代码的操作很多的话，代码就会变的很难维护了\n\n2. 假如`User`是某个对象所实现的接口类型，就是指在某个方法中参数为接口而传入的具体对象的时候，方法中你拿到的是接口的类型，而不知道对象的具体类型，这种情况下要怎么实现复制呢？\n\n#### 解决方法\n\n上面的问题会在代码中引入对象所属的类，导致两者产生了紧密的耦合；原型设计模式就是将克隆的过程委派给了被克隆的实际对象，这样只需要调用该对象的克隆方法就能够实现复制，而不需要和对象所属的类耦合在一起\n\n首先，原型设计模式为所有支持克隆的对象声明了一个通用的接口，接口中通常只有一个 `Clone()`的方法；然后，实体类实现该接口，在该方法中完成对象的复制操作；最后客户端调用的时候只需要调用该对象的`Clone()`方法就能够获取到一个和该对象相同的一个对象\n\n所有的类对`Clone()`方法的实现都很类似；该方法首先就是创建该类的一个对象，然后将原对象的所有成员变量赋值给新的对象就好了，如果有组合类型，那么调用组合类型的`Clone()`方法就好了；按照这种方式就可以实现对私有变量的复制了\n\n![01](./设计模式-原型模式/01.png)\n\n支持克隆的对象就是原型对象，当你的对象有几十种成员变量和几十种组合类型时，对其进行克隆甚至能够代替子类的构造；比如：创建一系列不同类型的对象用不同的方式进行配置，如果所需对象和预先配置的对象相同，那么就可以使用`Clone()`方法进行构造\n\n#### 原型设计模式代码示例\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"reflect\"\n)\n\ntype Prototype interface {\n\tClone() Prototype\n}\n\ntype Car struct {\n\tName  string\n\tColor string\n\tAge   int\n\tKind  string\n\twhich string\n}\n\nfunc (c *Car) Clone() Prototype {\n\tnewCar := &Car{\n\t\tName:  c.Name,\n\t\tColor: c.Color,\n\t\tAge:   c.Age,\n\t\tKind:  c.Kind,\n\t\twhich: c.which,\n\t}\n\treturn newCar\n}\n\nfunc main() {\n\tc := &Car{\n\t\tName:  \"BB\",\n\t\tColor: \"White\",\n\t\tAge:   1,\n\t\tKind:  \"BA\",\n\t\twhich: \"Me\",\n\t}\n\tfmt.Println(&c)\n\tcc := c.Clone()\n\tfmt.Println(reflect.TypeOf(cc))\n\tfmt.Println(cc)\n\tfmt.Println(&cc)\n}\n```\n\n#### 原型注册表\n\n原型注册表就是将所有的原型对象存储起来，然后提供一种访问原型对象的方法；比如：可以使用`HashMap`作为存储，然后将对象的名称作为`key`，对象实例作为值存储起来；使用的时候通过对象的名称就可以获取到原型对象了\n\n#### 适用场景\n\n###### 独立于当前代码\n\n假如当前代码中需要复制一些对象，同时又希望代码能够独立于这些对象所属的类，则就可以使用原型设计模式；\n\n原型设计模式提供了一个通用的接口，客户端通过使用这一个通用的接口来完成与克隆对象的交互，使得客户端代码与其克隆对象的类独立开\n\n###### 初始化子类\n\n如果子类的区别仅在于其对象的初始化方式，那就可以使用该类来减少子类的数量。因为别人创建这些子类的目的就是为了创建特定类型的对象；在原型模式中，可以使用一系列预生成的，各种类型的对象作为原型；客户端就不需要对子类进行初始化了，只需要找到合适的原型进行克隆就好了","source":"_posts/设计模式-原型模式.md","raw":"---\ntitle: 设计模式 — 原型模式\ndate: 2022-03-31 18:35:53\ntags:\n- 设计模式\n- design pattern\n- 原型模式\ncategory:\n- 设计模式\n---\n\n原型j就是指原来的类型或模型，特指文学艺术作品中塑造人物形象所依赖的现实生活中的人\n\n<!-- more -->\n\n#### 原型设计模式\n\n原型模式是一种创建型设计模式，它能够帮助你克隆指定的对象，并且无需和对象所属的类耦合，下面通过具体的问题来说明该设计模式的应用场景\n\n#### 问题\n\n假如现在有一个对象`User`，要复制和这个`User`完全一样的对象要怎么做呢？首先，需要新建一个同类对象，然后将`User`对象的所有成员变量复制到新对象就好了，但现在有两个问题：\n\n1. 如果有组合类型，那就需要遍历组合类型的成员变量来完成复制；如果变量是私有变量，那么只能再调用获取私有变量的方法才能够实现私有变量的复制；\n\n   按照这种方式进行复制的话，这段代码就和对象所属的类产生的紧密的耦合；原对象所属的类发生的任何变化，都要在此处进行相应的更改；如果这种复制代码的操作很多的话，代码就会变的很难维护了\n\n2. 假如`User`是某个对象所实现的接口类型，就是指在某个方法中参数为接口而传入的具体对象的时候，方法中你拿到的是接口的类型，而不知道对象的具体类型，这种情况下要怎么实现复制呢？\n\n#### 解决方法\n\n上面的问题会在代码中引入对象所属的类，导致两者产生了紧密的耦合；原型设计模式就是将克隆的过程委派给了被克隆的实际对象，这样只需要调用该对象的克隆方法就能够实现复制，而不需要和对象所属的类耦合在一起\n\n首先，原型设计模式为所有支持克隆的对象声明了一个通用的接口，接口中通常只有一个 `Clone()`的方法；然后，实体类实现该接口，在该方法中完成对象的复制操作；最后客户端调用的时候只需要调用该对象的`Clone()`方法就能够获取到一个和该对象相同的一个对象\n\n所有的类对`Clone()`方法的实现都很类似；该方法首先就是创建该类的一个对象，然后将原对象的所有成员变量赋值给新的对象就好了，如果有组合类型，那么调用组合类型的`Clone()`方法就好了；按照这种方式就可以实现对私有变量的复制了\n\n![01](./设计模式-原型模式/01.png)\n\n支持克隆的对象就是原型对象，当你的对象有几十种成员变量和几十种组合类型时，对其进行克隆甚至能够代替子类的构造；比如：创建一系列不同类型的对象用不同的方式进行配置，如果所需对象和预先配置的对象相同，那么就可以使用`Clone()`方法进行构造\n\n#### 原型设计模式代码示例\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"reflect\"\n)\n\ntype Prototype interface {\n\tClone() Prototype\n}\n\ntype Car struct {\n\tName  string\n\tColor string\n\tAge   int\n\tKind  string\n\twhich string\n}\n\nfunc (c *Car) Clone() Prototype {\n\tnewCar := &Car{\n\t\tName:  c.Name,\n\t\tColor: c.Color,\n\t\tAge:   c.Age,\n\t\tKind:  c.Kind,\n\t\twhich: c.which,\n\t}\n\treturn newCar\n}\n\nfunc main() {\n\tc := &Car{\n\t\tName:  \"BB\",\n\t\tColor: \"White\",\n\t\tAge:   1,\n\t\tKind:  \"BA\",\n\t\twhich: \"Me\",\n\t}\n\tfmt.Println(&c)\n\tcc := c.Clone()\n\tfmt.Println(reflect.TypeOf(cc))\n\tfmt.Println(cc)\n\tfmt.Println(&cc)\n}\n```\n\n#### 原型注册表\n\n原型注册表就是将所有的原型对象存储起来，然后提供一种访问原型对象的方法；比如：可以使用`HashMap`作为存储，然后将对象的名称作为`key`，对象实例作为值存储起来；使用的时候通过对象的名称就可以获取到原型对象了\n\n#### 适用场景\n\n###### 独立于当前代码\n\n假如当前代码中需要复制一些对象，同时又希望代码能够独立于这些对象所属的类，则就可以使用原型设计模式；\n\n原型设计模式提供了一个通用的接口，客户端通过使用这一个通用的接口来完成与克隆对象的交互，使得客户端代码与其克隆对象的类独立开\n\n###### 初始化子类\n\n如果子类的区别仅在于其对象的初始化方式，那就可以使用该类来减少子类的数量。因为别人创建这些子类的目的就是为了创建特定类型的对象；在原型模式中，可以使用一系列预生成的，各种类型的对象作为原型；客户端就不需要对子类进行初始化了，只需要找到合适的原型进行克隆就好了","slug":"设计模式-原型模式","published":1,"updated":"2022-03-31T01:43:25.475Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1n502rl000bz8tsdmtj1sno","content":"<p>原型j就是指原来的类型或模型，特指文学艺术作品中塑造人物形象所依赖的现实生活中的人</p>\n<span id=\"more\"></span>\n\n<h4 id=\"原型设计模式\"><a href=\"#原型设计模式\" class=\"headerlink\" title=\"原型设计模式\"></a>原型设计模式</h4><p>原型模式是一种创建型设计模式，它能够帮助你克隆指定的对象，并且无需和对象所属的类耦合，下面通过具体的问题来说明该设计模式的应用场景</p>\n<h4 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h4><p>假如现在有一个对象<code>User</code>，要复制和这个<code>User</code>完全一样的对象要怎么做呢？首先，需要新建一个同类对象，然后将<code>User</code>对象的所有成员变量复制到新对象就好了，但现在有两个问题：</p>\n<ol>\n<li><p>如果有组合类型，那就需要遍历组合类型的成员变量来完成复制；如果变量是私有变量，那么只能再调用获取私有变量的方法才能够实现私有变量的复制；</p>\n<p>按照这种方式进行复制的话，这段代码就和对象所属的类产生的紧密的耦合；原对象所属的类发生的任何变化，都要在此处进行相应的更改；如果这种复制代码的操作很多的话，代码就会变的很难维护了</p>\n</li>\n<li><p>假如<code>User</code>是某个对象所实现的接口类型，就是指在某个方法中参数为接口而传入的具体对象的时候，方法中你拿到的是接口的类型，而不知道对象的具体类型，这种情况下要怎么实现复制呢？</p>\n</li>\n</ol>\n<h4 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h4><p>上面的问题会在代码中引入对象所属的类，导致两者产生了紧密的耦合；原型设计模式就是将克隆的过程委派给了被克隆的实际对象，这样只需要调用该对象的克隆方法就能够实现复制，而不需要和对象所属的类耦合在一起</p>\n<p>首先，原型设计模式为所有支持克隆的对象声明了一个通用的接口，接口中通常只有一个 <code>Clone()</code>的方法；然后，实体类实现该接口，在该方法中完成对象的复制操作；最后客户端调用的时候只需要调用该对象的<code>Clone()</code>方法就能够获取到一个和该对象相同的一个对象</p>\n<p>所有的类对<code>Clone()</code>方法的实现都很类似；该方法首先就是创建该类的一个对象，然后将原对象的所有成员变量赋值给新的对象就好了，如果有组合类型，那么调用组合类型的<code>Clone()</code>方法就好了；按照这种方式就可以实现对私有变量的复制了</p>\n<p><img src=\"/./%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/01.png\" alt=\"01\"></p>\n<p>支持克隆的对象就是原型对象，当你的对象有几十种成员变量和几十种组合类型时，对其进行克隆甚至能够代替子类的构造；比如：创建一系列不同类型的对象用不同的方式进行配置，如果所需对象和预先配置的对象相同，那么就可以使用<code>Clone()</code>方法进行构造</p>\n<h4 id=\"原型设计模式代码示例\"><a href=\"#原型设计模式代码示例\" class=\"headerlink\" title=\"原型设计模式代码示例\"></a>原型设计模式代码示例</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;reflect&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Prototype <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tClone() Prototype</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Car <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tName  <span class=\"type\">string</span></span><br><span class=\"line\">\tColor <span class=\"type\">string</span></span><br><span class=\"line\">\tAge   <span class=\"type\">int</span></span><br><span class=\"line\">\tKind  <span class=\"type\">string</span></span><br><span class=\"line\">\twhich <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Car)</span></span> Clone() Prototype &#123;</span><br><span class=\"line\">\tnewCar := &amp;Car&#123;</span><br><span class=\"line\">\t\tName:  c.Name,</span><br><span class=\"line\">\t\tColor: c.Color,</span><br><span class=\"line\">\t\tAge:   c.Age,</span><br><span class=\"line\">\t\tKind:  c.Kind,</span><br><span class=\"line\">\t\twhich: c.which,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> newCar</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tc := &amp;Car&#123;</span><br><span class=\"line\">\t\tName:  <span class=\"string\">&quot;BB&quot;</span>,</span><br><span class=\"line\">\t\tColor: <span class=\"string\">&quot;White&quot;</span>,</span><br><span class=\"line\">\t\tAge:   <span class=\"number\">1</span>,</span><br><span class=\"line\">\t\tKind:  <span class=\"string\">&quot;BA&quot;</span>,</span><br><span class=\"line\">\t\twhich: <span class=\"string\">&quot;Me&quot;</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(&amp;c)</span><br><span class=\"line\">\tcc := c.Clone()</span><br><span class=\"line\">\tfmt.Println(reflect.TypeOf(cc))</span><br><span class=\"line\">\tfmt.Println(cc)</span><br><span class=\"line\">\tfmt.Println(&amp;cc)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"原型注册表\"><a href=\"#原型注册表\" class=\"headerlink\" title=\"原型注册表\"></a>原型注册表</h4><p>原型注册表就是将所有的原型对象存储起来，然后提供一种访问原型对象的方法；比如：可以使用<code>HashMap</code>作为存储，然后将对象的名称作为<code>key</code>，对象实例作为值存储起来；使用的时候通过对象的名称就可以获取到原型对象了</p>\n<h4 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h4><h6 id=\"独立于当前代码\"><a href=\"#独立于当前代码\" class=\"headerlink\" title=\"独立于当前代码\"></a>独立于当前代码</h6><p>假如当前代码中需要复制一些对象，同时又希望代码能够独立于这些对象所属的类，则就可以使用原型设计模式；</p>\n<p>原型设计模式提供了一个通用的接口，客户端通过使用这一个通用的接口来完成与克隆对象的交互，使得客户端代码与其克隆对象的类独立开</p>\n<h6 id=\"初始化子类\"><a href=\"#初始化子类\" class=\"headerlink\" title=\"初始化子类\"></a>初始化子类</h6><p>如果子类的区别仅在于其对象的初始化方式，那就可以使用该类来减少子类的数量。因为别人创建这些子类的目的就是为了创建特定类型的对象；在原型模式中，可以使用一系列预生成的，各种类型的对象作为原型；客户端就不需要对子类进行初始化了，只需要找到合适的原型进行克隆就好了</p>\n","site":{"data":{"styles":"body {\n  background: url(\"images/blogNew.jpg\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n"}},"excerpt":"<p>原型j就是指原来的类型或模型，特指文学艺术作品中塑造人物形象所依赖的现实生活中的人</p>","more":"<h4 id=\"原型设计模式\"><a href=\"#原型设计模式\" class=\"headerlink\" title=\"原型设计模式\"></a>原型设计模式</h4><p>原型模式是一种创建型设计模式，它能够帮助你克隆指定的对象，并且无需和对象所属的类耦合，下面通过具体的问题来说明该设计模式的应用场景</p>\n<h4 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h4><p>假如现在有一个对象<code>User</code>，要复制和这个<code>User</code>完全一样的对象要怎么做呢？首先，需要新建一个同类对象，然后将<code>User</code>对象的所有成员变量复制到新对象就好了，但现在有两个问题：</p>\n<ol>\n<li><p>如果有组合类型，那就需要遍历组合类型的成员变量来完成复制；如果变量是私有变量，那么只能再调用获取私有变量的方法才能够实现私有变量的复制；</p>\n<p>按照这种方式进行复制的话，这段代码就和对象所属的类产生的紧密的耦合；原对象所属的类发生的任何变化，都要在此处进行相应的更改；如果这种复制代码的操作很多的话，代码就会变的很难维护了</p>\n</li>\n<li><p>假如<code>User</code>是某个对象所实现的接口类型，就是指在某个方法中参数为接口而传入的具体对象的时候，方法中你拿到的是接口的类型，而不知道对象的具体类型，这种情况下要怎么实现复制呢？</p>\n</li>\n</ol>\n<h4 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h4><p>上面的问题会在代码中引入对象所属的类，导致两者产生了紧密的耦合；原型设计模式就是将克隆的过程委派给了被克隆的实际对象，这样只需要调用该对象的克隆方法就能够实现复制，而不需要和对象所属的类耦合在一起</p>\n<p>首先，原型设计模式为所有支持克隆的对象声明了一个通用的接口，接口中通常只有一个 <code>Clone()</code>的方法；然后，实体类实现该接口，在该方法中完成对象的复制操作；最后客户端调用的时候只需要调用该对象的<code>Clone()</code>方法就能够获取到一个和该对象相同的一个对象</p>\n<p>所有的类对<code>Clone()</code>方法的实现都很类似；该方法首先就是创建该类的一个对象，然后将原对象的所有成员变量赋值给新的对象就好了，如果有组合类型，那么调用组合类型的<code>Clone()</code>方法就好了；按照这种方式就可以实现对私有变量的复制了</p>\n<p><img src=\"/./%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/01.png\" alt=\"01\"></p>\n<p>支持克隆的对象就是原型对象，当你的对象有几十种成员变量和几十种组合类型时，对其进行克隆甚至能够代替子类的构造；比如：创建一系列不同类型的对象用不同的方式进行配置，如果所需对象和预先配置的对象相同，那么就可以使用<code>Clone()</code>方法进行构造</p>\n<h4 id=\"原型设计模式代码示例\"><a href=\"#原型设计模式代码示例\" class=\"headerlink\" title=\"原型设计模式代码示例\"></a>原型设计模式代码示例</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;reflect&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Prototype <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tClone() Prototype</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Car <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tName  <span class=\"type\">string</span></span><br><span class=\"line\">\tColor <span class=\"type\">string</span></span><br><span class=\"line\">\tAge   <span class=\"type\">int</span></span><br><span class=\"line\">\tKind  <span class=\"type\">string</span></span><br><span class=\"line\">\twhich <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Car)</span></span> Clone() Prototype &#123;</span><br><span class=\"line\">\tnewCar := &amp;Car&#123;</span><br><span class=\"line\">\t\tName:  c.Name,</span><br><span class=\"line\">\t\tColor: c.Color,</span><br><span class=\"line\">\t\tAge:   c.Age,</span><br><span class=\"line\">\t\tKind:  c.Kind,</span><br><span class=\"line\">\t\twhich: c.which,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> newCar</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tc := &amp;Car&#123;</span><br><span class=\"line\">\t\tName:  <span class=\"string\">&quot;BB&quot;</span>,</span><br><span class=\"line\">\t\tColor: <span class=\"string\">&quot;White&quot;</span>,</span><br><span class=\"line\">\t\tAge:   <span class=\"number\">1</span>,</span><br><span class=\"line\">\t\tKind:  <span class=\"string\">&quot;BA&quot;</span>,</span><br><span class=\"line\">\t\twhich: <span class=\"string\">&quot;Me&quot;</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(&amp;c)</span><br><span class=\"line\">\tcc := c.Clone()</span><br><span class=\"line\">\tfmt.Println(reflect.TypeOf(cc))</span><br><span class=\"line\">\tfmt.Println(cc)</span><br><span class=\"line\">\tfmt.Println(&amp;cc)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"原型注册表\"><a href=\"#原型注册表\" class=\"headerlink\" title=\"原型注册表\"></a>原型注册表</h4><p>原型注册表就是将所有的原型对象存储起来，然后提供一种访问原型对象的方法；比如：可以使用<code>HashMap</code>作为存储，然后将对象的名称作为<code>key</code>，对象实例作为值存储起来；使用的时候通过对象的名称就可以获取到原型对象了</p>\n<h4 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h4><h6 id=\"独立于当前代码\"><a href=\"#独立于当前代码\" class=\"headerlink\" title=\"独立于当前代码\"></a>独立于当前代码</h6><p>假如当前代码中需要复制一些对象，同时又希望代码能够独立于这些对象所属的类，则就可以使用原型设计模式；</p>\n<p>原型设计模式提供了一个通用的接口，客户端通过使用这一个通用的接口来完成与克隆对象的交互，使得客户端代码与其克隆对象的类独立开</p>\n<h6 id=\"初始化子类\"><a href=\"#初始化子类\" class=\"headerlink\" title=\"初始化子类\"></a>初始化子类</h6><p>如果子类的区别仅在于其对象的初始化方式，那就可以使用该类来减少子类的数量。因为别人创建这些子类的目的就是为了创建特定类型的对象；在原型模式中，可以使用一系列预生成的，各种类型的对象作为原型；客户端就不需要对子类进行初始化了，只需要找到合适的原型进行克隆就好了</p>"},{"title":"设计模式-工厂模式","date":"2022-04-06T05:21:05.000Z","_content":"\n## 工厂模式\n\n工厂模式是一种创建者模式，其在父类提供了一个创建对象的方法，由具体的子类来决定实例化对象的类型\n\n### 问题\n\n在本地有一个快递公司，使用卡车进行货物的运输; 随着公司的壮大，现在需要支持航空运输和轮船运输; 但是，之前的代码都是关于 `Truck`类的，在 `Truck`类中\n有一个方法`Delivery()`,之前客户端就是创建一个`Truck`类，然后调用`Delivery()`方法就完成了运输;\n\n公司的业务扩张，现在需要支持航空运输和轮船运输; 那要如何将这两种运输的方式添加进来呢？\n\n以前的客户端直接创建`Truck`类，然后调用其`Delivery`方法就完成货物的运输了; 如果现在也分别添加`Air`类和`Ship`类的话，那么客户端代码就会变得复杂了。\n首先，需要知道使用那种运输方式，然后再创建相应的对象; 这样的话，客户端代码和这些实体类就紧紧的耦合在一起了，这些类对象的任何改动，或者是有新的运输方式的加入都需要更改客户端的代码，并且客户端的代码会变得越来越难以维护\n\n### 简单方案\n\n为了将客户端代码和具体的对象创建代码隔离开来，此处就需要一个接口类型`Transport`，在接口类型中声明一个`Delivery`方法; 然后让不同的运输类实现这个方法即可，这样对于客户端而言只需要传入\n具体的运输方式，就可以创建指定的类对象了\n\n![factory_simple](./设计模式-工厂模式/factory_simple.png)\n\n代码示例：\n\n```\nimport \"fmt\"\n\ntype TransportSimple interface {\n\tDelivery() string\n}\n\nfunc CreateTransport(typ string) TransportSimple {\n\tswitch typ {\n\tcase \"truck\":\n\t\treturn &Truck{}\n\tcase \"airPlane\":\n\t\treturn &AirPlane{}\n\tdefault:\n\t\treturn nil\n\t}\n}\n\ntype Truck struct{}\n\nfunc (t *Truck) Delivery() string {\n\treturn fmt.Sprintf(\"use truck delivery...\")\n}\n\ntype AirPlane struct{}\n\nfunc (a *AirPlane) Delivery() string {\n\treturn fmt.Sprintf(\"use airplane delivery...\")\n}\n\n//客户端代码\nfunc main() {\n\tt := CreateTransport(\"truck\")\n\tt.Delivery()\n}\n\n```\n\n上面的方案已经能够很好的解决运输方式的不断更新了;但是现在公司业务越来越复杂了，比如: 在`Delivery`之前需要先对货品进行分类，然后放到不同的仓库当中，等到运输工具空闲时，再去取货运输;\n如果是这样的话，这种简单的方案就不能够应对了，因为这不仅涉及到了运输，还有其他的类;比如：store,category 等等;这时如果还用这种方式的话，客户端的代码就又会变得很复杂和庞大了，所以就需要更加复杂的一个解决方案了\n\n### 复杂方案\n\n为了能够解决公司业务的不断膨胀，这时就需要一个工厂接口了;在这个`Factory`接口中，不单只声明`CreateTransport()`方法，而且会有其他的操作了;此时的一个工厂就是一条生产线，包括：分类，存储，运输等操作了\n\n然后，通过具体的`Creator`来实现具体的一条生产线; 客户端只需要创建一个`Factory`的实例就可以对货物进行分类，存储，运输等功能了;下面是类图示例：\n\n![factory_complex](./设计模式-工厂模式/fac_complex.png)\n\n代码示例如下：\n\n```\npackage main\n\ntype Factory interface {\n\tCreateTransport() TransportSimple\n\tCreateStore() Store\n}\n\ntype CreatorA struct{}\n\nfunc (c *CreatorA) CreateTransport() TransportSimple {\n\treturn &Truck{}\n}\n\nfunc (c *CreatorA) CreateStore() Store {\n\treturn &ColdStore{}\n}\n\ntype CreatorB struct{}\n\nfunc (c *CreatorB) CreateTransport() TransportSimple {\n\treturn &AirPlane{}\n}\n\nfunc (c *CreatorB) CreateStore() Store {\n\treturn &HotStore{}\n}\n\nfunc CreateFactory(typ string) Factory {\n\tswitch typ {\n\tcase \"coldWithTruck\":\n\t\treturn &CreatorA{}\n\tcase \"hotWithAirPlane\":\n\t\treturn &CreatorB{}\n\t}\n\treturn nil\n}\n\n```\n\n这样就能够应对公司业务的不断变化了; 可在 [Github 中查可完成代码示例](https://github.com/bad2cat/programming-essence/tree/main/designPattern/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F)\n\n### 优缺点\n\n#### 优点\n\n 你可以避免创建者和具体产品之间的紧密耦合。\n 单一职责原则。 你可以将产品创建代码放在程序的单一位置， 从而使得代码更容易维护。\n 开闭原则。 无需更改现有客户端代码， 你就可以在程序中引入新的产品类型。\n\n#### 缺点\n\n应用工厂方法模式需要引入许多新的子类， 代码可能会因此变得更复杂。 最好的情况是将该模式引入创建者类的现有层次结构中。","source":"_posts/设计模式-工厂模式.md","raw":"---\ntitle: 设计模式-工厂模式\ndate: 2022-04-06 13:21:05\ntags:\n- 设计模式\n- design pattern\n- 原型模式\ncategory:\n- 设计模式\n---\n\n## 工厂模式\n\n工厂模式是一种创建者模式，其在父类提供了一个创建对象的方法，由具体的子类来决定实例化对象的类型\n\n### 问题\n\n在本地有一个快递公司，使用卡车进行货物的运输; 随着公司的壮大，现在需要支持航空运输和轮船运输; 但是，之前的代码都是关于 `Truck`类的，在 `Truck`类中\n有一个方法`Delivery()`,之前客户端就是创建一个`Truck`类，然后调用`Delivery()`方法就完成了运输;\n\n公司的业务扩张，现在需要支持航空运输和轮船运输; 那要如何将这两种运输的方式添加进来呢？\n\n以前的客户端直接创建`Truck`类，然后调用其`Delivery`方法就完成货物的运输了; 如果现在也分别添加`Air`类和`Ship`类的话，那么客户端代码就会变得复杂了。\n首先，需要知道使用那种运输方式，然后再创建相应的对象; 这样的话，客户端代码和这些实体类就紧紧的耦合在一起了，这些类对象的任何改动，或者是有新的运输方式的加入都需要更改客户端的代码，并且客户端的代码会变得越来越难以维护\n\n### 简单方案\n\n为了将客户端代码和具体的对象创建代码隔离开来，此处就需要一个接口类型`Transport`，在接口类型中声明一个`Delivery`方法; 然后让不同的运输类实现这个方法即可，这样对于客户端而言只需要传入\n具体的运输方式，就可以创建指定的类对象了\n\n![factory_simple](./设计模式-工厂模式/factory_simple.png)\n\n代码示例：\n\n```\nimport \"fmt\"\n\ntype TransportSimple interface {\n\tDelivery() string\n}\n\nfunc CreateTransport(typ string) TransportSimple {\n\tswitch typ {\n\tcase \"truck\":\n\t\treturn &Truck{}\n\tcase \"airPlane\":\n\t\treturn &AirPlane{}\n\tdefault:\n\t\treturn nil\n\t}\n}\n\ntype Truck struct{}\n\nfunc (t *Truck) Delivery() string {\n\treturn fmt.Sprintf(\"use truck delivery...\")\n}\n\ntype AirPlane struct{}\n\nfunc (a *AirPlane) Delivery() string {\n\treturn fmt.Sprintf(\"use airplane delivery...\")\n}\n\n//客户端代码\nfunc main() {\n\tt := CreateTransport(\"truck\")\n\tt.Delivery()\n}\n\n```\n\n上面的方案已经能够很好的解决运输方式的不断更新了;但是现在公司业务越来越复杂了，比如: 在`Delivery`之前需要先对货品进行分类，然后放到不同的仓库当中，等到运输工具空闲时，再去取货运输;\n如果是这样的话，这种简单的方案就不能够应对了，因为这不仅涉及到了运输，还有其他的类;比如：store,category 等等;这时如果还用这种方式的话，客户端的代码就又会变得很复杂和庞大了，所以就需要更加复杂的一个解决方案了\n\n### 复杂方案\n\n为了能够解决公司业务的不断膨胀，这时就需要一个工厂接口了;在这个`Factory`接口中，不单只声明`CreateTransport()`方法，而且会有其他的操作了;此时的一个工厂就是一条生产线，包括：分类，存储，运输等操作了\n\n然后，通过具体的`Creator`来实现具体的一条生产线; 客户端只需要创建一个`Factory`的实例就可以对货物进行分类，存储，运输等功能了;下面是类图示例：\n\n![factory_complex](./设计模式-工厂模式/fac_complex.png)\n\n代码示例如下：\n\n```\npackage main\n\ntype Factory interface {\n\tCreateTransport() TransportSimple\n\tCreateStore() Store\n}\n\ntype CreatorA struct{}\n\nfunc (c *CreatorA) CreateTransport() TransportSimple {\n\treturn &Truck{}\n}\n\nfunc (c *CreatorA) CreateStore() Store {\n\treturn &ColdStore{}\n}\n\ntype CreatorB struct{}\n\nfunc (c *CreatorB) CreateTransport() TransportSimple {\n\treturn &AirPlane{}\n}\n\nfunc (c *CreatorB) CreateStore() Store {\n\treturn &HotStore{}\n}\n\nfunc CreateFactory(typ string) Factory {\n\tswitch typ {\n\tcase \"coldWithTruck\":\n\t\treturn &CreatorA{}\n\tcase \"hotWithAirPlane\":\n\t\treturn &CreatorB{}\n\t}\n\treturn nil\n}\n\n```\n\n这样就能够应对公司业务的不断变化了; 可在 [Github 中查可完成代码示例](https://github.com/bad2cat/programming-essence/tree/main/designPattern/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F)\n\n### 优缺点\n\n#### 优点\n\n 你可以避免创建者和具体产品之间的紧密耦合。\n 单一职责原则。 你可以将产品创建代码放在程序的单一位置， 从而使得代码更容易维护。\n 开闭原则。 无需更改现有客户端代码， 你就可以在程序中引入新的产品类型。\n\n#### 缺点\n\n应用工厂方法模式需要引入许多新的子类， 代码可能会因此变得更复杂。 最好的情况是将该模式引入创建者类的现有层次结构中。","slug":"设计模式-工厂模式","published":1,"updated":"2022-04-06T05:26:29.670Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1n502rn000fz8tsdq1l9lcc","content":"<h2 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h2><p>工厂模式是一种创建者模式，其在父类提供了一个创建对象的方法，由具体的子类来决定实例化对象的类型</p>\n<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>在本地有一个快递公司，使用卡车进行货物的运输; 随着公司的壮大，现在需要支持航空运输和轮船运输; 但是，之前的代码都是关于 <code>Truck</code>类的，在 <code>Truck</code>类中<br>有一个方法<code>Delivery()</code>,之前客户端就是创建一个<code>Truck</code>类，然后调用<code>Delivery()</code>方法就完成了运输;</p>\n<p>公司的业务扩张，现在需要支持航空运输和轮船运输; 那要如何将这两种运输的方式添加进来呢？</p>\n<p>以前的客户端直接创建<code>Truck</code>类，然后调用其<code>Delivery</code>方法就完成货物的运输了; 如果现在也分别添加<code>Air</code>类和<code>Ship</code>类的话，那么客户端代码就会变得复杂了。<br>首先，需要知道使用那种运输方式，然后再创建相应的对象; 这样的话，客户端代码和这些实体类就紧紧的耦合在一起了，这些类对象的任何改动，或者是有新的运输方式的加入都需要更改客户端的代码，并且客户端的代码会变得越来越难以维护</p>\n<h3 id=\"简单方案\"><a href=\"#简单方案\" class=\"headerlink\" title=\"简单方案\"></a>简单方案</h3><p>为了将客户端代码和具体的对象创建代码隔离开来，此处就需要一个接口类型<code>Transport</code>，在接口类型中声明一个<code>Delivery</code>方法; 然后让不同的运输类实现这个方法即可，这样对于客户端而言只需要传入<br>具体的运输方式，就可以创建指定的类对象了</p>\n<p><img src=\"/./%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/factory_simple.png\" alt=\"factory_simple\"></p>\n<p>代码示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">type TransportSimple interface &#123;</span><br><span class=\"line\">\tDelivery() string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func CreateTransport(typ string) TransportSimple &#123;</span><br><span class=\"line\">\tswitch typ &#123;</span><br><span class=\"line\">\tcase &quot;truck&quot;:</span><br><span class=\"line\">\t\treturn &amp;Truck&#123;&#125;</span><br><span class=\"line\">\tcase &quot;airPlane&quot;:</span><br><span class=\"line\">\t\treturn &amp;AirPlane&#123;&#125;</span><br><span class=\"line\">\tdefault:</span><br><span class=\"line\">\t\treturn nil</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">type Truck struct&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (t *Truck) Delivery() string &#123;</span><br><span class=\"line\">\treturn fmt.Sprintf(&quot;use truck delivery...&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">type AirPlane struct&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (a *AirPlane) Delivery() string &#123;</span><br><span class=\"line\">\treturn fmt.Sprintf(&quot;use airplane delivery...&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//客户端代码</span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\tt := CreateTransport(&quot;truck&quot;)</span><br><span class=\"line\">\tt.Delivery()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>上面的方案已经能够很好的解决运输方式的不断更新了;但是现在公司业务越来越复杂了，比如: 在<code>Delivery</code>之前需要先对货品进行分类，然后放到不同的仓库当中，等到运输工具空闲时，再去取货运输;<br>如果是这样的话，这种简单的方案就不能够应对了，因为这不仅涉及到了运输，还有其他的类;比如：store,category 等等;这时如果还用这种方式的话，客户端的代码就又会变得很复杂和庞大了，所以就需要更加复杂的一个解决方案了</p>\n<h3 id=\"复杂方案\"><a href=\"#复杂方案\" class=\"headerlink\" title=\"复杂方案\"></a>复杂方案</h3><p>为了能够解决公司业务的不断膨胀，这时就需要一个工厂接口了;在这个<code>Factory</code>接口中，不单只声明<code>CreateTransport()</code>方法，而且会有其他的操作了;此时的一个工厂就是一条生产线，包括：分类，存储，运输等操作了</p>\n<p>然后，通过具体的<code>Creator</code>来实现具体的一条生产线; 客户端只需要创建一个<code>Factory</code>的实例就可以对货物进行分类，存储，运输等功能了;下面是类图示例：</p>\n<p><img src=\"/./%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/fac_complex.png\" alt=\"factory_complex\"></p>\n<p>代码示例如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">type Factory interface &#123;</span><br><span class=\"line\">\tCreateTransport() TransportSimple</span><br><span class=\"line\">\tCreateStore() Store</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">type CreatorA struct&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (c *CreatorA) CreateTransport() TransportSimple &#123;</span><br><span class=\"line\">\treturn &amp;Truck&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (c *CreatorA) CreateStore() Store &#123;</span><br><span class=\"line\">\treturn &amp;ColdStore&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">type CreatorB struct&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (c *CreatorB) CreateTransport() TransportSimple &#123;</span><br><span class=\"line\">\treturn &amp;AirPlane&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (c *CreatorB) CreateStore() Store &#123;</span><br><span class=\"line\">\treturn &amp;HotStore&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func CreateFactory(typ string) Factory &#123;</span><br><span class=\"line\">\tswitch typ &#123;</span><br><span class=\"line\">\tcase &quot;coldWithTruck&quot;:</span><br><span class=\"line\">\t\treturn &amp;CreatorA&#123;&#125;</span><br><span class=\"line\">\tcase &quot;hotWithAirPlane&quot;:</span><br><span class=\"line\">\t\treturn &amp;CreatorB&#123;&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn nil</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这样就能够应对公司业务的不断变化了; 可在 <a href=\"https://github.com/bad2cat/programming-essence/tree/main/designPattern/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F\">Github 中查可完成代码示例</a></p>\n<h3 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h3><h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h4><p> 你可以避免创建者和具体产品之间的紧密耦合。<br> 单一职责原则。 你可以将产品创建代码放在程序的单一位置， 从而使得代码更容易维护。<br> 开闭原则。 无需更改现有客户端代码， 你就可以在程序中引入新的产品类型。</p>\n<h4 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><p>应用工厂方法模式需要引入许多新的子类， 代码可能会因此变得更复杂。 最好的情况是将该模式引入创建者类的现有层次结构中。</p>\n","site":{"data":{"styles":"body {\n  background: url(\"images/blogNew.jpg\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n"}},"excerpt":"","more":"<h2 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h2><p>工厂模式是一种创建者模式，其在父类提供了一个创建对象的方法，由具体的子类来决定实例化对象的类型</p>\n<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>在本地有一个快递公司，使用卡车进行货物的运输; 随着公司的壮大，现在需要支持航空运输和轮船运输; 但是，之前的代码都是关于 <code>Truck</code>类的，在 <code>Truck</code>类中<br>有一个方法<code>Delivery()</code>,之前客户端就是创建一个<code>Truck</code>类，然后调用<code>Delivery()</code>方法就完成了运输;</p>\n<p>公司的业务扩张，现在需要支持航空运输和轮船运输; 那要如何将这两种运输的方式添加进来呢？</p>\n<p>以前的客户端直接创建<code>Truck</code>类，然后调用其<code>Delivery</code>方法就完成货物的运输了; 如果现在也分别添加<code>Air</code>类和<code>Ship</code>类的话，那么客户端代码就会变得复杂了。<br>首先，需要知道使用那种运输方式，然后再创建相应的对象; 这样的话，客户端代码和这些实体类就紧紧的耦合在一起了，这些类对象的任何改动，或者是有新的运输方式的加入都需要更改客户端的代码，并且客户端的代码会变得越来越难以维护</p>\n<h3 id=\"简单方案\"><a href=\"#简单方案\" class=\"headerlink\" title=\"简单方案\"></a>简单方案</h3><p>为了将客户端代码和具体的对象创建代码隔离开来，此处就需要一个接口类型<code>Transport</code>，在接口类型中声明一个<code>Delivery</code>方法; 然后让不同的运输类实现这个方法即可，这样对于客户端而言只需要传入<br>具体的运输方式，就可以创建指定的类对象了</p>\n<p><img src=\"/./%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/factory_simple.png\" alt=\"factory_simple\"></p>\n<p>代码示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">type TransportSimple interface &#123;</span><br><span class=\"line\">\tDelivery() string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func CreateTransport(typ string) TransportSimple &#123;</span><br><span class=\"line\">\tswitch typ &#123;</span><br><span class=\"line\">\tcase &quot;truck&quot;:</span><br><span class=\"line\">\t\treturn &amp;Truck&#123;&#125;</span><br><span class=\"line\">\tcase &quot;airPlane&quot;:</span><br><span class=\"line\">\t\treturn &amp;AirPlane&#123;&#125;</span><br><span class=\"line\">\tdefault:</span><br><span class=\"line\">\t\treturn nil</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">type Truck struct&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (t *Truck) Delivery() string &#123;</span><br><span class=\"line\">\treturn fmt.Sprintf(&quot;use truck delivery...&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">type AirPlane struct&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (a *AirPlane) Delivery() string &#123;</span><br><span class=\"line\">\treturn fmt.Sprintf(&quot;use airplane delivery...&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//客户端代码</span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\tt := CreateTransport(&quot;truck&quot;)</span><br><span class=\"line\">\tt.Delivery()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>上面的方案已经能够很好的解决运输方式的不断更新了;但是现在公司业务越来越复杂了，比如: 在<code>Delivery</code>之前需要先对货品进行分类，然后放到不同的仓库当中，等到运输工具空闲时，再去取货运输;<br>如果是这样的话，这种简单的方案就不能够应对了，因为这不仅涉及到了运输，还有其他的类;比如：store,category 等等;这时如果还用这种方式的话，客户端的代码就又会变得很复杂和庞大了，所以就需要更加复杂的一个解决方案了</p>\n<h3 id=\"复杂方案\"><a href=\"#复杂方案\" class=\"headerlink\" title=\"复杂方案\"></a>复杂方案</h3><p>为了能够解决公司业务的不断膨胀，这时就需要一个工厂接口了;在这个<code>Factory</code>接口中，不单只声明<code>CreateTransport()</code>方法，而且会有其他的操作了;此时的一个工厂就是一条生产线，包括：分类，存储，运输等操作了</p>\n<p>然后，通过具体的<code>Creator</code>来实现具体的一条生产线; 客户端只需要创建一个<code>Factory</code>的实例就可以对货物进行分类，存储，运输等功能了;下面是类图示例：</p>\n<p><img src=\"/./%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/fac_complex.png\" alt=\"factory_complex\"></p>\n<p>代码示例如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">type Factory interface &#123;</span><br><span class=\"line\">\tCreateTransport() TransportSimple</span><br><span class=\"line\">\tCreateStore() Store</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">type CreatorA struct&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (c *CreatorA) CreateTransport() TransportSimple &#123;</span><br><span class=\"line\">\treturn &amp;Truck&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (c *CreatorA) CreateStore() Store &#123;</span><br><span class=\"line\">\treturn &amp;ColdStore&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">type CreatorB struct&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (c *CreatorB) CreateTransport() TransportSimple &#123;</span><br><span class=\"line\">\treturn &amp;AirPlane&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (c *CreatorB) CreateStore() Store &#123;</span><br><span class=\"line\">\treturn &amp;HotStore&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func CreateFactory(typ string) Factory &#123;</span><br><span class=\"line\">\tswitch typ &#123;</span><br><span class=\"line\">\tcase &quot;coldWithTruck&quot;:</span><br><span class=\"line\">\t\treturn &amp;CreatorA&#123;&#125;</span><br><span class=\"line\">\tcase &quot;hotWithAirPlane&quot;:</span><br><span class=\"line\">\t\treturn &amp;CreatorB&#123;&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn nil</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这样就能够应对公司业务的不断变化了; 可在 <a href=\"https://github.com/bad2cat/programming-essence/tree/main/designPattern/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F\">Github 中查可完成代码示例</a></p>\n<h3 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h3><h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h4><p> 你可以避免创建者和具体产品之间的紧密耦合。<br> 单一职责原则。 你可以将产品创建代码放在程序的单一位置， 从而使得代码更容易维护。<br> 开闭原则。 无需更改现有客户端代码， 你就可以在程序中引入新的产品类型。</p>\n<h4 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><p>应用工厂方法模式需要引入许多新的子类， 代码可能会因此变得更复杂。 最好的情况是将该模式引入创建者类的现有层次结构中。</p>\n"},{"title":"搭建个人博客（2）- 部署Hexo到Github pages","date":"2022-03-16T07:01:54.000Z","_content":"\n完成上面的操作之后，博客系统就可以在本地进行访问了；但是如果想将博客系统放到公网，可以将 `Hexo`部署到`Github Pages`上。\n\n<!-- more -->\n\n#### 将 Hexo 部署到 GitHub Pages\n\n###### GithubPages 说明\n\n`GitHub Pages`就是一个免费的静态网站托管和发布平台，提供了两种托管的方式：\n\n- 通过 `Github`个人或者企业账号托管，这种情况下每个`Github`账号只能托管一个，并且`Repository`的名称必须为`username.github.io`\n- 通过`project`托管，这样每个`project`都可以托管一个静态网站，在这种情况下，默认托管在`gh-pages`分支下面\n\n具体可以参考[Github pages官网](https://pages.github.com/)，当然使用`github pages`也会有一些限制，比如：\n\n- 发布的`Git Pages`站点不超过`1GB`\n- 每月带宽限制为`100GB`或`100,000`次请求\n- 每小时限制构建次数不超过`10`次\n\n我选择使用`Github`个人账号托管博客，下面就是详细的将本地`Hexo`部署到 `GitHub Pages`的步骤\n\n###### 1. 在 `Github`创建仓\n\n登录到 [Github](https://github.com/)，创建仓库\n\n![01](.\\部署Hexo到Github-pages\\01.png)\n\n这个仓库必须创建为`public`的，仓库的名称就是`<username>.github.io`，`username`就是你`Github`的账号\n\n###### 2. 更改 Hexo 配置\n\n现在进入`hexo`博客的根目录，打开根目录下的配置文件`_config.yml`\n\n![02](.\\部署Hexo到Github-pages.\\02.png)\n\n打开之后，滑倒文件底部，找到`deploy`属性，这一块的内容更改为：\n\n```\ndeploy:\n  type: git\n  repository:  #你的仓库地址\n  branch: main\n```\n\n更改之后的结果如下所示：\n\n![03](.\\部署Hexo到Github-pages.\\03.png)\n\n###### 3. 发布到`GithubPages`\n\n完成上面的操作之后，在根目录打开`git bash`，安装部署插件命令如下：\n\n```\nnpm install hexo-deployer-git --save\n```\n\n安装完成之后，输入一下三条命令进行部署\n\n```\nhexo clean   #清除缓存文件 db.json 和已生成的静态文件 public\nhexo g       #生成网站静态文件到默认设置的 public 文件夹(hexo generate 的缩写)\nhexo d       #自动生成网站静态文件，并部署到设定的仓库(hexo deploy 的缩写)\n```\n\n完成之后，就可以发现在`<username>.github.io`仓库中已经有内容了，说明`hexo`博客已经成功的部署到`github`上了，接下来在浏览器中输入`https://<username>.github.io`，就可以看到刚才部署的博客了","source":"_posts/部署Hexo到Github-pages.md","raw":"---\ntitle: 搭建个人博客（2）- 部署Hexo到Github pages\ndate: 2022-03-16 15:01:54\ntags:\n- hexo\n- 个人博客搭建\ncategory:\n- 博客搭建\n---\n\n完成上面的操作之后，博客系统就可以在本地进行访问了；但是如果想将博客系统放到公网，可以将 `Hexo`部署到`Github Pages`上。\n\n<!-- more -->\n\n#### 将 Hexo 部署到 GitHub Pages\n\n###### GithubPages 说明\n\n`GitHub Pages`就是一个免费的静态网站托管和发布平台，提供了两种托管的方式：\n\n- 通过 `Github`个人或者企业账号托管，这种情况下每个`Github`账号只能托管一个，并且`Repository`的名称必须为`username.github.io`\n- 通过`project`托管，这样每个`project`都可以托管一个静态网站，在这种情况下，默认托管在`gh-pages`分支下面\n\n具体可以参考[Github pages官网](https://pages.github.com/)，当然使用`github pages`也会有一些限制，比如：\n\n- 发布的`Git Pages`站点不超过`1GB`\n- 每月带宽限制为`100GB`或`100,000`次请求\n- 每小时限制构建次数不超过`10`次\n\n我选择使用`Github`个人账号托管博客，下面就是详细的将本地`Hexo`部署到 `GitHub Pages`的步骤\n\n###### 1. 在 `Github`创建仓\n\n登录到 [Github](https://github.com/)，创建仓库\n\n![01](.\\部署Hexo到Github-pages\\01.png)\n\n这个仓库必须创建为`public`的，仓库的名称就是`<username>.github.io`，`username`就是你`Github`的账号\n\n###### 2. 更改 Hexo 配置\n\n现在进入`hexo`博客的根目录，打开根目录下的配置文件`_config.yml`\n\n![02](.\\部署Hexo到Github-pages.\\02.png)\n\n打开之后，滑倒文件底部，找到`deploy`属性，这一块的内容更改为：\n\n```\ndeploy:\n  type: git\n  repository:  #你的仓库地址\n  branch: main\n```\n\n更改之后的结果如下所示：\n\n![03](.\\部署Hexo到Github-pages.\\03.png)\n\n###### 3. 发布到`GithubPages`\n\n完成上面的操作之后，在根目录打开`git bash`，安装部署插件命令如下：\n\n```\nnpm install hexo-deployer-git --save\n```\n\n安装完成之后，输入一下三条命令进行部署\n\n```\nhexo clean   #清除缓存文件 db.json 和已生成的静态文件 public\nhexo g       #生成网站静态文件到默认设置的 public 文件夹(hexo generate 的缩写)\nhexo d       #自动生成网站静态文件，并部署到设定的仓库(hexo deploy 的缩写)\n```\n\n完成之后，就可以发现在`<username>.github.io`仓库中已经有内容了，说明`hexo`博客已经成功的部署到`github`上了，接下来在浏览器中输入`https://<username>.github.io`，就可以看到刚才部署的博客了","slug":"部署Hexo到Github-pages","published":1,"updated":"2022-03-31T02:52:55.478Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1n502s2000hz8tsgnkphllf","content":"<p>完成上面的操作之后，博客系统就可以在本地进行访问了；但是如果想将博客系统放到公网，可以将 <code>Hexo</code>部署到<code>Github Pages</code>上。</p>\n<span id=\"more\"></span>\n\n<h4 id=\"将-Hexo-部署到-GitHub-Pages\"><a href=\"#将-Hexo-部署到-GitHub-Pages\" class=\"headerlink\" title=\"将 Hexo 部署到 GitHub Pages\"></a>将 Hexo 部署到 GitHub Pages</h4><h6 id=\"GithubPages-说明\"><a href=\"#GithubPages-说明\" class=\"headerlink\" title=\"GithubPages 说明\"></a>GithubPages 说明</h6><p><code>GitHub Pages</code>就是一个免费的静态网站托管和发布平台，提供了两种托管的方式：</p>\n<ul>\n<li>通过 <code>Github</code>个人或者企业账号托管，这种情况下每个<code>Github</code>账号只能托管一个，并且<code>Repository</code>的名称必须为<code>username.github.io</code></li>\n<li>通过<code>project</code>托管，这样每个<code>project</code>都可以托管一个静态网站，在这种情况下，默认托管在<code>gh-pages</code>分支下面</li>\n</ul>\n<p>具体可以参考<a href=\"https://pages.github.com/\">Github pages官网</a>，当然使用<code>github pages</code>也会有一些限制，比如：</p>\n<ul>\n<li>发布的<code>Git Pages</code>站点不超过<code>1GB</code></li>\n<li>每月带宽限制为<code>100GB</code>或<code>100,000</code>次请求</li>\n<li>每小时限制构建次数不超过<code>10</code>次</li>\n</ul>\n<p>我选择使用<code>Github</code>个人账号托管博客，下面就是详细的将本地<code>Hexo</code>部署到 <code>GitHub Pages</code>的步骤</p>\n<h6 id=\"1-在-Github创建仓\"><a href=\"#1-在-Github创建仓\" class=\"headerlink\" title=\"1. 在 Github创建仓\"></a>1. 在 <code>Github</code>创建仓</h6><p>登录到 <a href=\"https://github.com/\">Github</a>，创建仓库</p>\n<p><img src=\"/.%5C%E9%83%A8%E7%BD%B2Hexo%E5%88%B0Github-pages%5C01.png\" alt=\"01\"></p>\n<p>这个仓库必须创建为<code>public</code>的，仓库的名称就是<code>&lt;username&gt;.github.io</code>，<code>username</code>就是你<code>Github</code>的账号</p>\n<h6 id=\"2-更改-Hexo-配置\"><a href=\"#2-更改-Hexo-配置\" class=\"headerlink\" title=\"2. 更改 Hexo 配置\"></a>2. 更改 Hexo 配置</h6><p>现在进入<code>hexo</code>博客的根目录，打开根目录下的配置文件<code>_config.yml</code></p>\n<p><img src=\"/.%5C%E9%83%A8%E7%BD%B2Hexo%E5%88%B0Github-pages.%5C02.png\" alt=\"02\"></p>\n<p>打开之后，滑倒文件底部，找到<code>deploy</code>属性，这一块的内容更改为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repository:  #你的仓库地址</span><br><span class=\"line\">  branch: main</span><br></pre></td></tr></table></figure>\n\n<p>更改之后的结果如下所示：</p>\n<p><img src=\"/.%5C%E9%83%A8%E7%BD%B2Hexo%E5%88%B0Github-pages.%5C03.png\" alt=\"03\"></p>\n<h6 id=\"3-发布到GithubPages\"><a href=\"#3-发布到GithubPages\" class=\"headerlink\" title=\"3. 发布到GithubPages\"></a>3. 发布到<code>GithubPages</code></h6><p>完成上面的操作之后，在根目录打开<code>git bash</code>，安装部署插件命令如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n\n<p>安装完成之后，输入一下三条命令进行部署</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean   #清除缓存文件 db.json 和已生成的静态文件 public</span><br><span class=\"line\">hexo g       #生成网站静态文件到默认设置的 public 文件夹(hexo generate 的缩写)</span><br><span class=\"line\">hexo d       #自动生成网站静态文件，并部署到设定的仓库(hexo deploy 的缩写)</span><br></pre></td></tr></table></figure>\n\n<p>完成之后，就可以发现在<code>&lt;username&gt;.github.io</code>仓库中已经有内容了，说明<code>hexo</code>博客已经成功的部署到<code>github</code>上了，接下来在浏览器中输入<code>https://&lt;username&gt;.github.io</code>，就可以看到刚才部署的博客了</p>\n","site":{"data":{"styles":"body {\n  background: url(\"images/blogNew.jpg\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n"}},"excerpt":"<p>完成上面的操作之后，博客系统就可以在本地进行访问了；但是如果想将博客系统放到公网，可以将 <code>Hexo</code>部署到<code>Github Pages</code>上。</p>","more":"<h4 id=\"将-Hexo-部署到-GitHub-Pages\"><a href=\"#将-Hexo-部署到-GitHub-Pages\" class=\"headerlink\" title=\"将 Hexo 部署到 GitHub Pages\"></a>将 Hexo 部署到 GitHub Pages</h4><h6 id=\"GithubPages-说明\"><a href=\"#GithubPages-说明\" class=\"headerlink\" title=\"GithubPages 说明\"></a>GithubPages 说明</h6><p><code>GitHub Pages</code>就是一个免费的静态网站托管和发布平台，提供了两种托管的方式：</p>\n<ul>\n<li>通过 <code>Github</code>个人或者企业账号托管，这种情况下每个<code>Github</code>账号只能托管一个，并且<code>Repository</code>的名称必须为<code>username.github.io</code></li>\n<li>通过<code>project</code>托管，这样每个<code>project</code>都可以托管一个静态网站，在这种情况下，默认托管在<code>gh-pages</code>分支下面</li>\n</ul>\n<p>具体可以参考<a href=\"https://pages.github.com/\">Github pages官网</a>，当然使用<code>github pages</code>也会有一些限制，比如：</p>\n<ul>\n<li>发布的<code>Git Pages</code>站点不超过<code>1GB</code></li>\n<li>每月带宽限制为<code>100GB</code>或<code>100,000</code>次请求</li>\n<li>每小时限制构建次数不超过<code>10</code>次</li>\n</ul>\n<p>我选择使用<code>Github</code>个人账号托管博客，下面就是详细的将本地<code>Hexo</code>部署到 <code>GitHub Pages</code>的步骤</p>\n<h6 id=\"1-在-Github创建仓\"><a href=\"#1-在-Github创建仓\" class=\"headerlink\" title=\"1. 在 Github创建仓\"></a>1. 在 <code>Github</code>创建仓</h6><p>登录到 <a href=\"https://github.com/\">Github</a>，创建仓库</p>\n<p><img src=\"/.%5C%E9%83%A8%E7%BD%B2Hexo%E5%88%B0Github-pages%5C01.png\" alt=\"01\"></p>\n<p>这个仓库必须创建为<code>public</code>的，仓库的名称就是<code>&lt;username&gt;.github.io</code>，<code>username</code>就是你<code>Github</code>的账号</p>\n<h6 id=\"2-更改-Hexo-配置\"><a href=\"#2-更改-Hexo-配置\" class=\"headerlink\" title=\"2. 更改 Hexo 配置\"></a>2. 更改 Hexo 配置</h6><p>现在进入<code>hexo</code>博客的根目录，打开根目录下的配置文件<code>_config.yml</code></p>\n<p><img src=\"/.%5C%E9%83%A8%E7%BD%B2Hexo%E5%88%B0Github-pages.%5C02.png\" alt=\"02\"></p>\n<p>打开之后，滑倒文件底部，找到<code>deploy</code>属性，这一块的内容更改为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repository:  #你的仓库地址</span><br><span class=\"line\">  branch: main</span><br></pre></td></tr></table></figure>\n\n<p>更改之后的结果如下所示：</p>\n<p><img src=\"/.%5C%E9%83%A8%E7%BD%B2Hexo%E5%88%B0Github-pages.%5C03.png\" alt=\"03\"></p>\n<h6 id=\"3-发布到GithubPages\"><a href=\"#3-发布到GithubPages\" class=\"headerlink\" title=\"3. 发布到GithubPages\"></a>3. 发布到<code>GithubPages</code></h6><p>完成上面的操作之后，在根目录打开<code>git bash</code>，安装部署插件命令如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n\n<p>安装完成之后，输入一下三条命令进行部署</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean   #清除缓存文件 db.json 和已生成的静态文件 public</span><br><span class=\"line\">hexo g       #生成网站静态文件到默认设置的 public 文件夹(hexo generate 的缩写)</span><br><span class=\"line\">hexo d       #自动生成网站静态文件，并部署到设定的仓库(hexo deploy 的缩写)</span><br></pre></td></tr></table></figure>\n\n<p>完成之后，就可以发现在<code>&lt;username&gt;.github.io</code>仓库中已经有内容了，说明<code>hexo</code>博客已经成功的部署到<code>github</code>上了，接下来在浏览器中输入<code>https://&lt;username&gt;.github.io</code>，就可以看到刚才部署的博客了</p>"},{"title":"搭建个人博客(5) - 集成GithubAction","date":"2022-03-17T10:55:35.000Z","_content":"\n这样，博客已经搭建好了，可以在本地的根目录下通过命令创建博客，如下：\n\n```\nhexo new post 'Fisrt Blog'\n```\n\n执行完命令之后就会在`Blog/source/_posts`下面生成一个`md`文档了，然后在该文档中写入想发表的内容之后保存；同样的执行命令：\n\n```\nhexo clean\nhexo g\nhexo d\n```\n\n然后就可以发布博客到`Github`了，通过之前购买的域名刷新就可以看到发表的博客了；如果每次都这样写博客会很难受，并且如果更换了电脑，需要重新再打造之前的环境了。那如何解决这个问题呢？\n\n<!-- more -->\n\n#### Hexo 持续集成`GithubAction`\n\n为了能够在各个地方都很容易的发表博客，那就需要实现`Hexo`持续集成；现在有两种集成的方式：\n\n##### 持续集成 `Travis CI`\n\n这种方式可以参考，Hexo [官方文档](https://hexo.io/zh-cn/docs/github-pages)\n\n##### 持续集成 `Github Action`\n\n说明：Github Action 是`Github` 的一种执行任务的脚本，将`hexo`持续集成`Gihub Action`之后，需要将本地的博客系统`push`到`Github`的一个仓库中（也可以是仓库`<username>.github.io`的一个分支）；之后每次写博客时，只需要将这个博客系统拉到本地，写完之后`push`上去即可，脚本`Github Actions`就会自动发布博客的更新\n\n下面就介绍使用`Github Action`持续集成的例子\n\n1. ###### 添加仓库\n\n   本文选择将博客系统推送的一个新的分支，所以需要创建一个新的仓库，可以将这个仓库设置为`private`，因为没必要让别人看到博客的源码，新建的仓库为`blog`\n\n2. ###### 推送源码，设置 secret\n\n   在本地的跟目录下面，打开`git bash`界面，将本地的源码推送到`blog`仓库；\n\n   注：在这里要注意一点，之前下载主题是，在主题那个文件夹会有一个`.git`隐藏文件，在你推送之前一定要把这个`.git`文件删除掉，否则推送上去之后主题就会失效\n\n   接下来，打开`blog`仓库的`setting`，添加`secret`，如下：\n\n   ![01](.\\集成GithubAction\\01.png)\n\n   此时需要为`Github`生成一对公私密钥，[参考这里](https://www.cnblogs.com/yuqiliu/p/12551258.html)，点击添加之后，`key`为`ACCESS_TOKEN`，值就是生成的私钥\n\n3. ###### 设置 Deploy keys\n\n   1. 打开仓库`<username>.github.io`，打开`setting`，选择`Deploy keys`添加，`key`为`ACTIONS_DEPLOY_KEY`,值就是刚才生成的公钥，如下：\n\n      ![02](.\\集成GithubAction\\02.png)\n\n      注：如果是在同一个仓库的不同分支则可以使用`Github Personal Token`，因为这是在不同仓库所以只能使用公私密钥\n\n4. ###### 添加`Github Action`脚本\n\n   最后，就是添加`GithubAction`脚本在`blog`仓库当中了，打开`blog`仓库，点击到`Action`，新建`Action`脚本\n\n   ![03](.\\集成GithubAction\\03.png)\n\n   脚本的内容如下所示：\n\n   ```\n   name: Github Pages\n   on:\n     push:\n       branches:\n         - main # main 分支 push 行为时就触发这个 action\n     pull_request:\n   \n   jobs:\n     build-and-deploy:\n       runs-on: ubuntu-latest\n       concurrency:\n         group: ${{ github.workflow }}-${{ github.ref }}\n       steps:\n         - uses: actions/checkout@v2\n         \n         - name: Setup Node\n           uses: actions/setup-node@v2\n           with:\n             node-version: '16'\n             \n         - name: Cache dependencies\n           uses: actions/cache@v2\n           with:\n             path: ~/.npm\n             key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}\n             restore-keys: |\n               ${{ runner.os }}-node-\n         - run: npm ci\n         - run: npm run build\n         \n   \n         - name: Deploy\n           uses: theme-keep/hexo-deploy-github-pages-action@master \n           env:\n             PERSONAL_TOKEN: ${{ secrets.ACCESS_TOKEN }}\n   \n              # The repository the action should deploy to.\n             PUBLISH_REPOSITORY: bad2cat/bad2cat.github.io //这就是push 到博客仓库\n   \n             # The branch the action should deploy to.\n             BRANCH: main   //push 到那个分支\n   ```\n\n5. 重新部署\n\n   现在到本地的博客根目录下，新建一个博客，然后直接将博客源码推送到`blog`仓库，然后就会触发这个脚本了，这个脚本的作用就是把博客的内容部署到`<username>.github.io`仓库下面，等一会刷新页面就可以看到部署的结果了","source":"_posts/集成GithubAction.md","raw":"---\ntitle: 搭建个人博客(5) - 集成GithubAction\ndate: 2022-03-17 18:55:35\ntags:\n- hexo\n- 个人博客搭建\ncategory:\n- 博客搭建\n---\n\n这样，博客已经搭建好了，可以在本地的根目录下通过命令创建博客，如下：\n\n```\nhexo new post 'Fisrt Blog'\n```\n\n执行完命令之后就会在`Blog/source/_posts`下面生成一个`md`文档了，然后在该文档中写入想发表的内容之后保存；同样的执行命令：\n\n```\nhexo clean\nhexo g\nhexo d\n```\n\n然后就可以发布博客到`Github`了，通过之前购买的域名刷新就可以看到发表的博客了；如果每次都这样写博客会很难受，并且如果更换了电脑，需要重新再打造之前的环境了。那如何解决这个问题呢？\n\n<!-- more -->\n\n#### Hexo 持续集成`GithubAction`\n\n为了能够在各个地方都很容易的发表博客，那就需要实现`Hexo`持续集成；现在有两种集成的方式：\n\n##### 持续集成 `Travis CI`\n\n这种方式可以参考，Hexo [官方文档](https://hexo.io/zh-cn/docs/github-pages)\n\n##### 持续集成 `Github Action`\n\n说明：Github Action 是`Github` 的一种执行任务的脚本，将`hexo`持续集成`Gihub Action`之后，需要将本地的博客系统`push`到`Github`的一个仓库中（也可以是仓库`<username>.github.io`的一个分支）；之后每次写博客时，只需要将这个博客系统拉到本地，写完之后`push`上去即可，脚本`Github Actions`就会自动发布博客的更新\n\n下面就介绍使用`Github Action`持续集成的例子\n\n1. ###### 添加仓库\n\n   本文选择将博客系统推送的一个新的分支，所以需要创建一个新的仓库，可以将这个仓库设置为`private`，因为没必要让别人看到博客的源码，新建的仓库为`blog`\n\n2. ###### 推送源码，设置 secret\n\n   在本地的跟目录下面，打开`git bash`界面，将本地的源码推送到`blog`仓库；\n\n   注：在这里要注意一点，之前下载主题是，在主题那个文件夹会有一个`.git`隐藏文件，在你推送之前一定要把这个`.git`文件删除掉，否则推送上去之后主题就会失效\n\n   接下来，打开`blog`仓库的`setting`，添加`secret`，如下：\n\n   ![01](.\\集成GithubAction\\01.png)\n\n   此时需要为`Github`生成一对公私密钥，[参考这里](https://www.cnblogs.com/yuqiliu/p/12551258.html)，点击添加之后，`key`为`ACCESS_TOKEN`，值就是生成的私钥\n\n3. ###### 设置 Deploy keys\n\n   1. 打开仓库`<username>.github.io`，打开`setting`，选择`Deploy keys`添加，`key`为`ACTIONS_DEPLOY_KEY`,值就是刚才生成的公钥，如下：\n\n      ![02](.\\集成GithubAction\\02.png)\n\n      注：如果是在同一个仓库的不同分支则可以使用`Github Personal Token`，因为这是在不同仓库所以只能使用公私密钥\n\n4. ###### 添加`Github Action`脚本\n\n   最后，就是添加`GithubAction`脚本在`blog`仓库当中了，打开`blog`仓库，点击到`Action`，新建`Action`脚本\n\n   ![03](.\\集成GithubAction\\03.png)\n\n   脚本的内容如下所示：\n\n   ```\n   name: Github Pages\n   on:\n     push:\n       branches:\n         - main # main 分支 push 行为时就触发这个 action\n     pull_request:\n   \n   jobs:\n     build-and-deploy:\n       runs-on: ubuntu-latest\n       concurrency:\n         group: ${{ github.workflow }}-${{ github.ref }}\n       steps:\n         - uses: actions/checkout@v2\n         \n         - name: Setup Node\n           uses: actions/setup-node@v2\n           with:\n             node-version: '16'\n             \n         - name: Cache dependencies\n           uses: actions/cache@v2\n           with:\n             path: ~/.npm\n             key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}\n             restore-keys: |\n               ${{ runner.os }}-node-\n         - run: npm ci\n         - run: npm run build\n         \n   \n         - name: Deploy\n           uses: theme-keep/hexo-deploy-github-pages-action@master \n           env:\n             PERSONAL_TOKEN: ${{ secrets.ACCESS_TOKEN }}\n   \n              # The repository the action should deploy to.\n             PUBLISH_REPOSITORY: bad2cat/bad2cat.github.io //这就是push 到博客仓库\n   \n             # The branch the action should deploy to.\n             BRANCH: main   //push 到那个分支\n   ```\n\n5. 重新部署\n\n   现在到本地的博客根目录下，新建一个博客，然后直接将博客源码推送到`blog`仓库，然后就会触发这个脚本了，这个脚本的作用就是把博客的内容部署到`<username>.github.io`仓库下面，等一会刷新页面就可以看到部署的结果了","slug":"集成GithubAction","published":1,"updated":"2022-03-30T08:37:20.863Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1n502s5000mz8tseis7h5yw","content":"<p>这样，博客已经搭建好了，可以在本地的根目录下通过命令创建博客，如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new post &#x27;Fisrt Blog&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>执行完命令之后就会在<code>Blog/source/_posts</code>下面生成一个<code>md</code>文档了，然后在该文档中写入想发表的内容之后保存；同样的执行命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n\n<p>然后就可以发布博客到<code>Github</code>了，通过之前购买的域名刷新就可以看到发表的博客了；如果每次都这样写博客会很难受，并且如果更换了电脑，需要重新再打造之前的环境了。那如何解决这个问题呢？</p>\n<span id=\"more\"></span>\n\n<h4 id=\"Hexo-持续集成GithubAction\"><a href=\"#Hexo-持续集成GithubAction\" class=\"headerlink\" title=\"Hexo 持续集成GithubAction\"></a>Hexo 持续集成<code>GithubAction</code></h4><p>为了能够在各个地方都很容易的发表博客，那就需要实现<code>Hexo</code>持续集成；现在有两种集成的方式：</p>\n<h5 id=\"持续集成-Travis-CI\"><a href=\"#持续集成-Travis-CI\" class=\"headerlink\" title=\"持续集成 Travis CI\"></a>持续集成 <code>Travis CI</code></h5><p>这种方式可以参考，Hexo <a href=\"https://hexo.io/zh-cn/docs/github-pages\">官方文档</a></p>\n<h5 id=\"持续集成-Github-Action\"><a href=\"#持续集成-Github-Action\" class=\"headerlink\" title=\"持续集成 Github Action\"></a>持续集成 <code>Github Action</code></h5><p>说明：Github Action 是<code>Github</code> 的一种执行任务的脚本，将<code>hexo</code>持续集成<code>Gihub Action</code>之后，需要将本地的博客系统<code>push</code>到<code>Github</code>的一个仓库中（也可以是仓库<code>&lt;username&gt;.github.io</code>的一个分支）；之后每次写博客时，只需要将这个博客系统拉到本地，写完之后<code>push</code>上去即可，脚本<code>Github Actions</code>就会自动发布博客的更新</p>\n<p>下面就介绍使用<code>Github Action</code>持续集成的例子</p>\n<ol>\n<li><h6 id=\"添加仓库\"><a href=\"#添加仓库\" class=\"headerlink\" title=\"添加仓库\"></a>添加仓库</h6><p>本文选择将博客系统推送的一个新的分支，所以需要创建一个新的仓库，可以将这个仓库设置为<code>private</code>，因为没必要让别人看到博客的源码，新建的仓库为<code>blog</code></p>\n</li>\n<li><h6 id=\"推送源码，设置-secret\"><a href=\"#推送源码，设置-secret\" class=\"headerlink\" title=\"推送源码，设置 secret\"></a>推送源码，设置 secret</h6><p>在本地的跟目录下面，打开<code>git bash</code>界面，将本地的源码推送到<code>blog</code>仓库；</p>\n<p>注：在这里要注意一点，之前下载主题是，在主题那个文件夹会有一个<code>.git</code>隐藏文件，在你推送之前一定要把这个<code>.git</code>文件删除掉，否则推送上去之后主题就会失效</p>\n<p>接下来，打开<code>blog</code>仓库的<code>setting</code>，添加<code>secret</code>，如下：</p>\n<p><img src=\"/.%5C%E9%9B%86%E6%88%90GithubAction%5C01.png\" alt=\"01\"></p>\n<p>此时需要为<code>Github</code>生成一对公私密钥，<a href=\"https://www.cnblogs.com/yuqiliu/p/12551258.html\">参考这里</a>，点击添加之后，<code>key</code>为<code>ACCESS_TOKEN</code>，值就是生成的私钥</p>\n</li>\n<li><h6 id=\"设置-Deploy-keys\"><a href=\"#设置-Deploy-keys\" class=\"headerlink\" title=\"设置 Deploy keys\"></a>设置 Deploy keys</h6><ol>\n<li><p>打开仓库<code>&lt;username&gt;.github.io</code>，打开<code>setting</code>，选择<code>Deploy keys</code>添加，<code>key</code>为<code>ACTIONS_DEPLOY_KEY</code>,值就是刚才生成的公钥，如下：</p>\n<p><img src=\"/.%5C%E9%9B%86%E6%88%90GithubAction%5C02.png\" alt=\"02\"></p>\n<p>注：如果是在同一个仓库的不同分支则可以使用<code>Github Personal Token</code>，因为这是在不同仓库所以只能使用公私密钥</p>\n</li>\n</ol>\n</li>\n<li><h6 id=\"添加Github-Action脚本\"><a href=\"#添加Github-Action脚本\" class=\"headerlink\" title=\"添加Github Action脚本\"></a>添加<code>Github Action</code>脚本</h6><p>最后，就是添加<code>GithubAction</code>脚本在<code>blog</code>仓库当中了，打开<code>blog</code>仓库，点击到<code>Action</code>，新建<code>Action</code>脚本</p>\n<p><img src=\"/.%5C%E9%9B%86%E6%88%90GithubAction%5C03.png\" alt=\"03\"></p>\n<p>脚本的内容如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name: Github Pages</span><br><span class=\"line\">on:</span><br><span class=\"line\">  push:</span><br><span class=\"line\">    branches:</span><br><span class=\"line\">      - main # main 分支 push 行为时就触发这个 action</span><br><span class=\"line\">  pull_request:</span><br><span class=\"line\"></span><br><span class=\"line\">jobs:</span><br><span class=\"line\">  build-and-deploy:</span><br><span class=\"line\">    runs-on: ubuntu-latest</span><br><span class=\"line\">    concurrency:</span><br><span class=\"line\">      group: $&#123;&#123; github.workflow &#125;&#125;-$&#123;&#123; github.ref &#125;&#125;</span><br><span class=\"line\">    steps:</span><br><span class=\"line\">      - uses: actions/checkout@v2</span><br><span class=\"line\">      </span><br><span class=\"line\">      - name: Setup Node</span><br><span class=\"line\">        uses: actions/setup-node@v2</span><br><span class=\"line\">        with:</span><br><span class=\"line\">          node-version: &#x27;16&#x27;</span><br><span class=\"line\">          </span><br><span class=\"line\">      - name: Cache dependencies</span><br><span class=\"line\">        uses: actions/cache@v2</span><br><span class=\"line\">        with:</span><br><span class=\"line\">          path: ~/.npm</span><br><span class=\"line\">          key: $&#123;&#123; runner.os &#125;&#125;-node-$&#123;&#123; hashFiles(&#x27;**/package-lock.json&#x27;) &#125;&#125;</span><br><span class=\"line\">          restore-keys: |</span><br><span class=\"line\">            $&#123;&#123; runner.os &#125;&#125;-node-</span><br><span class=\"line\">      - run: npm ci</span><br><span class=\"line\">      - run: npm run build</span><br><span class=\"line\">      </span><br><span class=\"line\"></span><br><span class=\"line\">      - name: Deploy</span><br><span class=\"line\">        uses: theme-keep/hexo-deploy-github-pages-action@master </span><br><span class=\"line\">        env:</span><br><span class=\"line\">          PERSONAL_TOKEN: $&#123;&#123; secrets.ACCESS_TOKEN &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           # The repository the action should deploy to.</span><br><span class=\"line\">          PUBLISH_REPOSITORY: bad2cat/bad2cat.github.io //这就是push 到博客仓库</span><br><span class=\"line\"></span><br><span class=\"line\">          # The branch the action should deploy to.</span><br><span class=\"line\">          BRANCH: main   //push 到那个分支</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重新部署</p>\n<p>现在到本地的博客根目录下，新建一个博客，然后直接将博客源码推送到<code>blog</code>仓库，然后就会触发这个脚本了，这个脚本的作用就是把博客的内容部署到<code>&lt;username&gt;.github.io</code>仓库下面，等一会刷新页面就可以看到部署的结果了</p>\n</li>\n</ol>\n","site":{"data":{"styles":"body {\n  background: url(\"images/blogNew.jpg\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n"}},"excerpt":"<p>这样，博客已经搭建好了，可以在本地的根目录下通过命令创建博客，如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new post &#x27;Fisrt Blog&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>执行完命令之后就会在<code>Blog/source/_posts</code>下面生成一个<code>md</code>文档了，然后在该文档中写入想发表的内容之后保存；同样的执行命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n\n<p>然后就可以发布博客到<code>Github</code>了，通过之前购买的域名刷新就可以看到发表的博客了；如果每次都这样写博客会很难受，并且如果更换了电脑，需要重新再打造之前的环境了。那如何解决这个问题呢？</p>","more":"<h4 id=\"Hexo-持续集成GithubAction\"><a href=\"#Hexo-持续集成GithubAction\" class=\"headerlink\" title=\"Hexo 持续集成GithubAction\"></a>Hexo 持续集成<code>GithubAction</code></h4><p>为了能够在各个地方都很容易的发表博客，那就需要实现<code>Hexo</code>持续集成；现在有两种集成的方式：</p>\n<h5 id=\"持续集成-Travis-CI\"><a href=\"#持续集成-Travis-CI\" class=\"headerlink\" title=\"持续集成 Travis CI\"></a>持续集成 <code>Travis CI</code></h5><p>这种方式可以参考，Hexo <a href=\"https://hexo.io/zh-cn/docs/github-pages\">官方文档</a></p>\n<h5 id=\"持续集成-Github-Action\"><a href=\"#持续集成-Github-Action\" class=\"headerlink\" title=\"持续集成 Github Action\"></a>持续集成 <code>Github Action</code></h5><p>说明：Github Action 是<code>Github</code> 的一种执行任务的脚本，将<code>hexo</code>持续集成<code>Gihub Action</code>之后，需要将本地的博客系统<code>push</code>到<code>Github</code>的一个仓库中（也可以是仓库<code>&lt;username&gt;.github.io</code>的一个分支）；之后每次写博客时，只需要将这个博客系统拉到本地，写完之后<code>push</code>上去即可，脚本<code>Github Actions</code>就会自动发布博客的更新</p>\n<p>下面就介绍使用<code>Github Action</code>持续集成的例子</p>\n<ol>\n<li><h6 id=\"添加仓库\"><a href=\"#添加仓库\" class=\"headerlink\" title=\"添加仓库\"></a>添加仓库</h6><p>本文选择将博客系统推送的一个新的分支，所以需要创建一个新的仓库，可以将这个仓库设置为<code>private</code>，因为没必要让别人看到博客的源码，新建的仓库为<code>blog</code></p>\n</li>\n<li><h6 id=\"推送源码，设置-secret\"><a href=\"#推送源码，设置-secret\" class=\"headerlink\" title=\"推送源码，设置 secret\"></a>推送源码，设置 secret</h6><p>在本地的跟目录下面，打开<code>git bash</code>界面，将本地的源码推送到<code>blog</code>仓库；</p>\n<p>注：在这里要注意一点，之前下载主题是，在主题那个文件夹会有一个<code>.git</code>隐藏文件，在你推送之前一定要把这个<code>.git</code>文件删除掉，否则推送上去之后主题就会失效</p>\n<p>接下来，打开<code>blog</code>仓库的<code>setting</code>，添加<code>secret</code>，如下：</p>\n<p><img src=\"/.%5C%E9%9B%86%E6%88%90GithubAction%5C01.png\" alt=\"01\"></p>\n<p>此时需要为<code>Github</code>生成一对公私密钥，<a href=\"https://www.cnblogs.com/yuqiliu/p/12551258.html\">参考这里</a>，点击添加之后，<code>key</code>为<code>ACCESS_TOKEN</code>，值就是生成的私钥</p>\n</li>\n<li><h6 id=\"设置-Deploy-keys\"><a href=\"#设置-Deploy-keys\" class=\"headerlink\" title=\"设置 Deploy keys\"></a>设置 Deploy keys</h6><ol>\n<li><p>打开仓库<code>&lt;username&gt;.github.io</code>，打开<code>setting</code>，选择<code>Deploy keys</code>添加，<code>key</code>为<code>ACTIONS_DEPLOY_KEY</code>,值就是刚才生成的公钥，如下：</p>\n<p><img src=\"/.%5C%E9%9B%86%E6%88%90GithubAction%5C02.png\" alt=\"02\"></p>\n<p>注：如果是在同一个仓库的不同分支则可以使用<code>Github Personal Token</code>，因为这是在不同仓库所以只能使用公私密钥</p>\n</li>\n</ol>\n</li>\n<li><h6 id=\"添加Github-Action脚本\"><a href=\"#添加Github-Action脚本\" class=\"headerlink\" title=\"添加Github Action脚本\"></a>添加<code>Github Action</code>脚本</h6><p>最后，就是添加<code>GithubAction</code>脚本在<code>blog</code>仓库当中了，打开<code>blog</code>仓库，点击到<code>Action</code>，新建<code>Action</code>脚本</p>\n<p><img src=\"/.%5C%E9%9B%86%E6%88%90GithubAction%5C03.png\" alt=\"03\"></p>\n<p>脚本的内容如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name: Github Pages</span><br><span class=\"line\">on:</span><br><span class=\"line\">  push:</span><br><span class=\"line\">    branches:</span><br><span class=\"line\">      - main # main 分支 push 行为时就触发这个 action</span><br><span class=\"line\">  pull_request:</span><br><span class=\"line\"></span><br><span class=\"line\">jobs:</span><br><span class=\"line\">  build-and-deploy:</span><br><span class=\"line\">    runs-on: ubuntu-latest</span><br><span class=\"line\">    concurrency:</span><br><span class=\"line\">      group: $&#123;&#123; github.workflow &#125;&#125;-$&#123;&#123; github.ref &#125;&#125;</span><br><span class=\"line\">    steps:</span><br><span class=\"line\">      - uses: actions/checkout@v2</span><br><span class=\"line\">      </span><br><span class=\"line\">      - name: Setup Node</span><br><span class=\"line\">        uses: actions/setup-node@v2</span><br><span class=\"line\">        with:</span><br><span class=\"line\">          node-version: &#x27;16&#x27;</span><br><span class=\"line\">          </span><br><span class=\"line\">      - name: Cache dependencies</span><br><span class=\"line\">        uses: actions/cache@v2</span><br><span class=\"line\">        with:</span><br><span class=\"line\">          path: ~/.npm</span><br><span class=\"line\">          key: $&#123;&#123; runner.os &#125;&#125;-node-$&#123;&#123; hashFiles(&#x27;**/package-lock.json&#x27;) &#125;&#125;</span><br><span class=\"line\">          restore-keys: |</span><br><span class=\"line\">            $&#123;&#123; runner.os &#125;&#125;-node-</span><br><span class=\"line\">      - run: npm ci</span><br><span class=\"line\">      - run: npm run build</span><br><span class=\"line\">      </span><br><span class=\"line\"></span><br><span class=\"line\">      - name: Deploy</span><br><span class=\"line\">        uses: theme-keep/hexo-deploy-github-pages-action@master </span><br><span class=\"line\">        env:</span><br><span class=\"line\">          PERSONAL_TOKEN: $&#123;&#123; secrets.ACCESS_TOKEN &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           # The repository the action should deploy to.</span><br><span class=\"line\">          PUBLISH_REPOSITORY: bad2cat/bad2cat.github.io //这就是push 到博客仓库</span><br><span class=\"line\"></span><br><span class=\"line\">          # The branch the action should deploy to.</span><br><span class=\"line\">          BRANCH: main   //push 到那个分支</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重新部署</p>\n<p>现在到本地的博客根目录下，新建一个博客，然后直接将博客源码推送到<code>blog</code>仓库，然后就会触发这个脚本了，这个脚本的作用就是把博客的内容部署到<code>&lt;username&gt;.github.io</code>仓库下面，等一会刷新页面就可以看到部署的结果了</p>\n</li>\n</ol>"},{"title":"如何生成 github personal token","date":"2022-03-16T07:37:41.000Z","category":null,"_content":"","source":"_drafts/Github不支持账密操作的解决方案.md","raw":"---\ntitle: 如何生成 github personal token\ndate: 2022-03-16 15:37:41\ntags:\ncategory:\n---\n","slug":"Github不支持账密操作的解决方案","published":0,"updated":"2022-03-30T09:06:33.574Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1n502s6000pz8tse3skgyyc","content":"","site":{"data":{"styles":"body {\n  background: url(\"images/blogNew.jpg\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n"}},"excerpt":"","more":""},{"title":"nodejs 安装详解","_content":"","source":"_drafts/nodejs-安装详解.md","raw":"---\ntitle: nodejs 安装详解\ntags:\n---\n","slug":"nodejs-安装详解","published":0,"date":"2022-03-16T07:40:59.172Z","updated":"2022-03-16T10:16:38.081Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1n502s8000uz8ts6yw8ah18","content":"","site":{"data":{"styles":"body {\n  background: url(\"images/blogNew.jpg\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n"}},"excerpt":"","more":""},{"title":"如何收集日志","date":"2022-03-30T09:08:36.000Z","category":null,"_content":"\n##### 如何在高并发的程序中收集日志","source":"_drafts/如何收集日志.md","raw":"---\ntitle: 如何收集日志\ndate: 2022-03-30 17:08:36\ntags:\ncategory:\n---\n\n##### 如何在高并发的程序中收集日志","slug":"如何收集日志","published":0,"updated":"2022-03-30T09:09:35.588Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1n502t2001wz8ts0r7j8g8h","content":"<h5 id=\"如何在高并发的程序中收集日志\"><a href=\"#如何在高并发的程序中收集日志\" class=\"headerlink\" title=\"如何在高并发的程序中收集日志\"></a>如何在高并发的程序中收集日志</h5>","site":{"data":{"styles":"body {\n  background: url(\"images/blogNew.jpg\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n"}},"excerpt":"","more":"<h5 id=\"如何在高并发的程序中收集日志\"><a href=\"#如何在高并发的程序中收集日志\" class=\"headerlink\" title=\"如何在高并发的程序中收集日志\"></a>如何在高并发的程序中收集日志</h5>"},{"title":"如何在代码中正确的打印日志","date":"2022-03-30T08:37:09.000Z","_content":"\n程序中的日志往\n\n参考：https://github.com/bingoohuang/blog/issues/151\n\n","source":"_drafts/日志规范.md","raw":"---\ntitle: 如何在代码中正确的打印日志\ndate: 2022-03-30 16:37:09\ntags:\n- 程序日志\n- 日志打印\ncategory:\n- 程序日志\n---\n\n程序中的日志往\n\n参考：https://github.com/bingoohuang/blog/issues/151\n\n","slug":"日志规范","published":0,"updated":"2022-04-01T10:19:48.819Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1n502t2001xz8ts485o8fbd","content":"<p>程序中的日志往</p>\n<p>参考：<a href=\"https://github.com/bingoohuang/blog/issues/151\">https://github.com/bingoohuang/blog/issues/151</a></p>\n","site":{"data":{"styles":"body {\n  background: url(\"images/blogNew.jpg\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n"}},"excerpt":"","more":"<p>程序中的日志往</p>\n<p>参考：<a href=\"https://github.com/bingoohuang/blog/issues/151\">https://github.com/bingoohuang/blog/issues/151</a></p>\n"}],"PostAsset":[{"_id":"source/_posts/更换博客主题/01.png","post":"cl1n502rg0003z8tselumdy4x","slug":"01.png","modified":1,"renderable":1},{"_id":"source/_posts/更换博客主题/02.png","post":"cl1n502rg0003z8tselumdy4x","slug":"02.png","modified":1,"renderable":1},{"_id":"source/_posts/更换博客主题/03.png","post":"cl1n502rg0003z8tselumdy4x","slug":"03.png","modified":1,"renderable":1},{"_id":"source/_posts/更换博客主题/04.png","post":"cl1n502rg0003z8tselumdy4x","slug":"04.png","modified":1,"renderable":1},{"_id":"source/_posts/更换博客主题/05.png","post":"cl1n502rg0003z8tselumdy4x","slug":"05.png","modified":1,"renderable":1},{"_id":"source/_posts/更换博客主题/06.png","post":"cl1n502rg0003z8tselumdy4x","slug":"06.png","modified":1,"renderable":1},{"_id":"source/_posts/更换博客主题/07.png","post":"cl1n502rg0003z8tselumdy4x","slug":"07.png","modified":1,"renderable":1},{"_id":"source/_posts/更换博客主题/08.png","post":"cl1n502rg0003z8tselumdy4x","slug":"08.png","modified":1,"renderable":1},{"_id":"source/_posts/更换博客主题/09.png","post":"cl1n502rg0003z8tselumdy4x","slug":"09.png","modified":1,"renderable":1},{"_id":"source/_posts/更换博客主题/10.png","post":"cl1n502rg0003z8tselumdy4x","slug":"10.png","modified":1,"renderable":1},{"_id":"source/_posts/更换博客主题/11.png","post":"cl1n502rg0003z8tselumdy4x","slug":"11.png","modified":1,"renderable":1},{"_id":"source/_posts/更换博客主题/12.png","post":"cl1n502rg0003z8tselumdy4x","slug":"12.png","modified":1,"renderable":1},{"_id":"source/_posts/更换博客主题/13.png","post":"cl1n502rg0003z8tselumdy4x","slug":"13.png","modified":1,"renderable":1},{"_id":"source/_posts/设计模式-原型模式/01.png","post":"cl1n502rl000bz8tsdmtj1sno","slug":"01.png","modified":1,"renderable":1},{"_id":"source/_posts/设计模式-工厂模式/factory_simple.png","post":"cl1n502rn000fz8tsdq1l9lcc","slug":"factory_simple.png","modified":1,"renderable":1},{"_id":"source/_posts/设计模式-工厂模式/fac_complex.png","post":"cl1n502rn000fz8tsdq1l9lcc","slug":"fac_complex.png","modified":1,"renderable":1},{"_id":"source/_posts/部署Hexo到Github-pages/01.png","post":"cl1n502s2000hz8tsgnkphllf","slug":"01.png","modified":1,"renderable":1},{"_id":"source/_posts/部署Hexo到Github-pages/02.png","post":"cl1n502s2000hz8tsgnkphllf","slug":"02.png","modified":1,"renderable":1},{"_id":"source/_posts/部署Hexo到Github-pages/03.png","post":"cl1n502s2000hz8tsgnkphllf","slug":"03.png","modified":1,"renderable":1},{"_id":"source/_posts/集成GithubAction/01.png","post":"cl1n502s5000mz8tseis7h5yw","slug":"01.png","modified":1,"renderable":1},{"_id":"source/_posts/集成GithubAction/02.png","post":"cl1n502s5000mz8tseis7h5yw","slug":"02.png","modified":1,"renderable":1},{"_id":"source/_posts/集成GithubAction/03.png","post":"cl1n502s5000mz8tseis7h5yw","slug":"03.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"cl1n502rd0001z8ts3bd176wb","category_id":"cl1n502ri0004z8ts6yqj9u9l","_id":"cl1n502s3000iz8tscy3sggg7"},{"post_id":"cl1n502rg0003z8tselumdy4x","category_id":"cl1n502rm000cz8ts6mo9a35t","_id":"cl1n502s7000sz8ts39llbhxn"},{"post_id":"cl1n502s2000hz8tsgnkphllf","category_id":"cl1n502rm000cz8ts6mo9a35t","_id":"cl1n502s8000vz8tsa7eh2505"},{"post_id":"cl1n502s5000mz8tseis7h5yw","category_id":"cl1n502rm000cz8ts6mo9a35t","_id":"cl1n502s9000xz8tsebood7tc"},{"post_id":"cl1n502rj0007z8ts3nj829ju","category_id":"cl1n502rm000cz8ts6mo9a35t","_id":"cl1n502s9000zz8ts3zci4bw7"},{"post_id":"cl1n502rl0009z8ts3msc295u","category_id":"cl1n502rm000cz8ts6mo9a35t","_id":"cl1n502s90011z8ts02kp68ul"},{"post_id":"cl1n502rl000bz8tsdmtj1sno","category_id":"cl1n502s9000wz8ts5tw05tr8","_id":"cl1n502sa0015z8tsgzpi8vlj"},{"post_id":"cl1n502rn000fz8tsdq1l9lcc","category_id":"cl1n502s9000wz8ts5tw05tr8","_id":"cl1n502sa0018z8ts0lys6r0w"},{"post_id":"cl1n502t2001xz8ts485o8fbd","category_id":"cl1n502t3001yz8tsa6a1c6x3","_id":"cl1n502t60021z8tsdpqvf1lc"}],"PostTag":[{"post_id":"cl1n502rd0001z8ts3bd176wb","tag_id":"cl1n502rj0005z8tsazescea1","_id":"cl1n502s6000nz8ts0i4f63i0"},{"post_id":"cl1n502rd0001z8ts3bd176wb","tag_id":"cl1n502rm000dz8ts64yq9wpg","_id":"cl1n502s7000qz8tshh1l2bio"},{"post_id":"cl1n502rg0003z8tselumdy4x","tag_id":"cl1n502s3000kz8tsclow7riw","_id":"cl1n502s90010z8ts3n0l7ioi"},{"post_id":"cl1n502rg0003z8tselumdy4x","tag_id":"cl1n502s7000tz8ts640peekf","_id":"cl1n502s90013z8ts685vchlu"},{"post_id":"cl1n502rj0007z8ts3nj829ju","tag_id":"cl1n502s3000kz8tsclow7riw","_id":"cl1n502sa0017z8tsacef08lu"},{"post_id":"cl1n502rj0007z8ts3nj829ju","tag_id":"cl1n502s7000tz8ts640peekf","_id":"cl1n502sa0019z8ts3t28gpcu"},{"post_id":"cl1n502rl0009z8ts3msc295u","tag_id":"cl1n502s3000kz8tsclow7riw","_id":"cl1n502sb001cz8ts4ioyhzky"},{"post_id":"cl1n502rl0009z8ts3msc295u","tag_id":"cl1n502s7000tz8ts640peekf","_id":"cl1n502sb001dz8tsght80rhv"},{"post_id":"cl1n502rl000bz8tsdmtj1sno","tag_id":"cl1n502sb001bz8tsfzqb846e","_id":"cl1n502sc001hz8ts139e5lva"},{"post_id":"cl1n502rl000bz8tsdmtj1sno","tag_id":"cl1n502sb001ez8ts6egn5r87","_id":"cl1n502sc001iz8tsena21ems"},{"post_id":"cl1n502rl000bz8tsdmtj1sno","tag_id":"cl1n502sb001fz8ts9bzqdz8m","_id":"cl1n502sc001kz8tshktw7626"},{"post_id":"cl1n502rn000fz8tsdq1l9lcc","tag_id":"cl1n502sb001bz8tsfzqb846e","_id":"cl1n502sd001nz8ts2sdl9oov"},{"post_id":"cl1n502rn000fz8tsdq1l9lcc","tag_id":"cl1n502sb001ez8ts6egn5r87","_id":"cl1n502sd001oz8ts5z6e1of2"},{"post_id":"cl1n502rn000fz8tsdq1l9lcc","tag_id":"cl1n502sb001fz8ts9bzqdz8m","_id":"cl1n502sd001qz8tsdvnt8ht5"},{"post_id":"cl1n502s2000hz8tsgnkphllf","tag_id":"cl1n502s3000kz8tsclow7riw","_id":"cl1n502sd001sz8ts6oy991jk"},{"post_id":"cl1n502s2000hz8tsgnkphllf","tag_id":"cl1n502s7000tz8ts640peekf","_id":"cl1n502sd001tz8ts89ct4ebr"},{"post_id":"cl1n502s5000mz8tseis7h5yw","tag_id":"cl1n502s3000kz8tsclow7riw","_id":"cl1n502sd001uz8tsdrsz31jt"},{"post_id":"cl1n502s5000mz8tseis7h5yw","tag_id":"cl1n502s7000tz8ts640peekf","_id":"cl1n502sd001vz8ts4i6eeg8x"},{"post_id":"cl1n502t2001xz8ts485o8fbd","tag_id":"cl1n502t5001zz8ts9zfg2l39","_id":"cl1n502t60022z8ts9gsihr29"},{"post_id":"cl1n502t2001xz8ts485o8fbd","tag_id":"cl1n502t50020z8ts33eadbsv","_id":"cl1n502t60023z8ts27rtb2uj"}],"Tag":[{"name":"DNS","_id":"cl1n502rj0005z8tsazescea1"},{"name":"域名解析","_id":"cl1n502rm000dz8ts64yq9wpg"},{"name":"hexo","_id":"cl1n502s3000kz8tsclow7riw"},{"name":"个人博客搭建","_id":"cl1n502s7000tz8ts640peekf"},{"name":"设计模式","_id":"cl1n502sb001bz8tsfzqb846e"},{"name":"design pattern","_id":"cl1n502sb001ez8ts6egn5r87"},{"name":"原型模式","_id":"cl1n502sb001fz8ts9bzqdz8m"},{"name":"程序日志","_id":"cl1n502t5001zz8ts9zfg2l39"},{"name":"日志打印","_id":"cl1n502t50020z8ts33eadbsv"}]}}